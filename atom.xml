<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kshqsz&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-26T06:07:41.077Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kshqsz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codeforces Round 947 (Div.1 + Div.2)</title>
    <link href="http://example.com/2024/05/26/Codeforces-Round-947-Div-1-Div-2/"/>
    <id>http://example.com/2024/05/26/Codeforces-Round-947-Div-1-Div-2/</id>
    <published>2024-05-26T05:07:01.000Z</published>
    <updated>2024-05-26T06:07:41.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="D-Paint-the-Tree"><a href="#D-Paint-the-Tree" class="headerlink" title="D. Paint the Tree"></a>D. Paint the Tree</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>​    给定一颗无向树，树上有两颗棋子初始位于 a 和 b 两个点 棋子 2 可以将棋子 1 走过的地方染色，问染完整棵树需要的最少步数是多少 。(一步是指棋子 1 先走一步，棋子 2 再走一步)</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>​    找到棋子1 和 2 的中点，让棋子 1 和 2 走到一起，以此点为根 dfs 跑这颗树，经过所有点即可。首先考虑走完整颗树后回到根节点，需要每条边走恰好两次，总步数为 $2 \times (n - 1)$。因为最后染色完并不要求回到根，所以考虑停在哪里是最优的，很明显停在深度最大的地方是最优的。所以总步数为 $2 \times(n - 1) - max(depth)$，加上一开始让棋子 1 和 2 相遇所需要的步数即为最终答案。如何找到棋子 1和 2 的中点，只需要以 a 为根在 dfs  过程中记录 parent，然后从 b 开始方向遍历即可找到 a ~ b 这条链，最后取 $link[size / 2]$ 即为中点，同时相遇所需要的步数为 $ size / 2$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    a--, b--;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; g[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u--, v--;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">parent</span><span class="params">(n)</span>, <span class="title">depth</span><span class="params">(n)</span></span>;</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> p) &#123;</span><br><span class="line">        parent[u] = p;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : g[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != p) &#123;</span><br><span class="line">                depth[v] = depth[u] + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(v, u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(a, <span class="number">-1</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; link;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b; i != <span class="number">-1</span>; i = parent[i]) &#123;</span><br><span class="line">        link.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    depth.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> lenth = link.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> root = link[lenth / <span class="number">2</span>], cost = lenth / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(root, <span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> max_depth = ranges::<span class="built_in">max</span>(depth);</span><br><span class="line">    cout &lt;&lt; <span class="number">2</span> * (n - <span class="number">1</span>) - max_depth + cost &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;D-Paint-the-Tree&quot;&gt;&lt;a href=&quot;#D-Paint-the-Tree&quot; class=&quot;headerlink&quot; title=&quot;D. Paint the Tree&quot;&gt;&lt;/a&gt;D. Paint the Tree&lt;/h1&gt;&lt;h2 id=&quot;题意&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codeforces" scheme="http://example.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE</title>
    <link href="http://example.com/2024/05/23/JavaEE/"/>
    <id>http://example.com/2024/05/23/JavaEE/</id>
    <published>2024-05-23T00:12:31.000Z</published>
    <updated>2024-05-23T15:26:58.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="商品信息管理系统"><a href="#商品信息管理系统" class="headerlink" title="商品信息管理系统"></a>商品信息管理系统</h1><h2 id="所有项目源码-Kshqsz-GoodsServiceManager-github-com"><a href="#所有项目源码-Kshqsz-GoodsServiceManager-github-com" class="headerlink" title="所有项目源码: Kshqsz/GoodsServiceManager (github.com)"></a>所有项目源码: <a href="https://github.com/Kshqsz/GoodsServiceManager">Kshqsz/GoodsServiceManager (github.com)</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;商品信息管理系统&quot;&gt;&lt;a href=&quot;#商品信息管理系统&quot; class=&quot;headerlink&quot; title=&quot;商品信息管理系统&quot;&gt;&lt;/a&gt;商品信息管理系统&lt;/h1&gt;&lt;h2 id=&quot;所有项目源码-Kshqsz-GoodsServiceManager-github-</summary>
      
    
    
    
    <category term="Java后端" scheme="http://example.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理上课笔记</title>
    <link href="http://example.com/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/</id>
    <published>2024-05-22T15:39:59.000Z</published>
    <updated>2024-05-24T15:40:39.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章期末复习"><a href="#第一章期末复习" class="headerlink" title="第一章期末复习"></a>第一章期末复习</h1><ol><li><p>下列部件的位数一定与机器字长相同的是 (B)</p><p>I. ALU  II. 指令寄存器  III.通用寄存器  IV.浮点寄存器</p><blockquote><p>B 正确，首先 ALU  是用来进行算术运算的主要部件，一定与机器字长相同，通用寄存器则可以用来保存中间计算结构，比如乘法器等。</p><p>拓展：指令寄存器（Instruction Register，简称IR）是计算机中的一种特殊寄存器，用于存储当前正在执行的指令。所以其位数       通常与计算机体系结构和指令集架构有关，与指令长度，寻址方式等密切相关。</p><p>​       浮点寄存器（Floating Point Register）是计算机中用来存储浮点数（floating-point numbers）的寄存器。通常需要更多       位数进行拓展以提高计算精度。</p></blockquote><ul><li>A. I、II</li><li>B. I、III</li><li>C. II、III</li><li>D. II、III、IV</li></ul><p><br></p></li><li><p>下列关于冯·诺依曼结构计算机基本思想的叙述中，错误的是 (C)</p><blockquote><p>C 错误，因为数据不一定都直接在指令中给出。它可以存储在存储器的某个地址中，然后在执行指令时按地址访问这个数据。类似于一种间接访问的形式。</p></blockquote><ul><li>A. 程序的功能都通过中央处理器执行指令实现</li><li>B. 指令和数据都用二进制表示，形式上无差别</li><li>C. 指令按地址访问，数据都在指令中直接给出</li><li>D. 程序执行前，指令和数据需预先存放在存储器中</li></ul><p><br></p></li><li><p>$93 PFLOPS$​​  = (D)</p><blockquote><p>D正确，首先需要知道 P 是多大 注意这里的 P  是用来衡量计算速度的而不是文件大小</p><p>在衡量大小时 $1K = 2^{10}\ \ 1M = 2^{20} \ \ 1G = 2^{30} \ \ 1T = 2^{40} \ \ 1P = 2^{50}$</p><p>在衡量速度时 $1K = 10^3 \ \ 1M = 10^6 \ \ 1G = 10^9 \ \ 1T = 10^{12} \ \ 1P = 10^{15}$</p><p>此题中即 $93\times 10^{15} = 9.3\times 10^{16}$   而 $10^8 = 1亿$</p><p>所以选择D $9.3亿亿$</p></blockquote><ul><li>A. $9.3 \times 10^{13}$</li><li>B. $9.3 \times 10^{15}$</li><li>C. $9.3千万亿$</li><li>D. $9.3亿亿$​</li></ul><p><br></p></li><li><p>下列关于冯·诺依曼计算机中指令和数据存放位置的叙述，正确的是 (D)</p><blockquote><p>D正确，一开始计算机中指令和数据存放在外存中，启动后被装入内存</p></blockquote><ul><li>A. 指令存放在内存中，数据存放在外存中</li><li>B. 指令和数据任何时候都存放在内存中</li><li>C. 指令和数据任何时候都存放在外存中</li><li>D. 程序被启动前指令和数据都存放在外存中，而启动后指令和数据都被装入内存中</li></ul><p><br></p></li><li><p>一般情况下, “裸机”是指 (C)</p><blockquote><p>C正确，裸机是指没有安装任何软件的计算机。计算机由硬件系统和软件系统所组成，没有安装任何软件的计算机称为裸机</p></blockquote><ul><li>A. 单片机</li><li>B. 没有使用过的计算机</li><li>C. 没有安装任何软件的计算机</li><li>D. 只安装操作系统的计算机</li></ul><p><br></p></li><li><p>计算机系统的层次结构，下列五个级别的机器<strong>由下到上</strong>的顺序是 (B)</p><blockquote><p>B正确，计算机系统的层次结构见下图。<img src="/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/image-20240524221824378.png" alt="image-20240524221824378"></p></blockquote><p>I 机器语言机器 II 汇编语言机器 III 高级语言机器 IV 微程序控制机器 V 操作系统机器</p><ul><li>A. I → II → III → IV → V</li><li>B. IV → I → V → II → III</li><li>C. III → II → V → I → IV</li><li>D. V → IV → III → II → I</li></ul><p><br></p></li><li><p>下列关于系统软件叙述中，正确的是（A）</p><blockquote><p>A正确，系统软件和应用软件共同组成了计算机软件系统。直接支持用户使用计算机硬件，是计算机系统中最接近硬件的一层通用软件，一般与具体应用领域无关。</p></blockquote><ul><li>A. 系统软件与具体应用领域无关</li><li>B. 系统软件与具体硬件逻辑功能无关</li><li>C. 系统软件是在应用软件基础上开发的</li><li>D. 系统软件并不具体提供人机界面</li></ul><p><br></p></li><li><p>对于汇编语言程序员来说，以下部件不透明的是 (C)</p><blockquote><p>C正确，首先需要知道透明的意思，在计算机的术语中透明的意思是看不见，而不透明的意思是看得见。透明部分是指那些不属于自己管的那部分，所以看不见。而不透明则需要自己了解和管理。汇编语言程序员需要通过汇编语言来直接读写通用寄存器中的值以进行运算，可以想象以下汇编语言的语法，可以操作通用寄存器中的值来进行运算。同时需要操作中断字寄存器来修改中断的优先级。</p><p>拓展: 关于计算机中透明与不透明的寄存器</p><p><strong>所有用户可见（应用程序员等于用户）：</strong><br>PC(指令计数器)，PSW(标志寄存器)，通用寄存器，ACC(累加器)</p><p><strong>对汇编程序可见（用户可见的汇编程序员也可见）:</strong><br>中断字寄存器（可以修改中断的优先级）</p><p>基址寄存器（基址寻址）</p><p>变址寄存器（变址寻址，如数组的访问需要）</p><p>条件码寄存器</p><p>通用寄存器</p><p><strong>对所有用户不可见:</strong><br>MAR(存储器地址寄存器）</p><p>MDR(存储器数据寄存器)</p><p>IR(指令寄存器)（指令寄存器是从主存中取出来存放指令的寄存器，无法编辑，自然也不可见）</p><p>uIR(微指令寄存器，uMAR，uMDR)</p><p>Cache(高速缓存)</p></blockquote><p>I 指令缓冲器 II 移位器  III 通用寄存器  IV 中断字寄存器  V 乘法器 VI 先行进位链</p><ul><li>A. I、II、和 III </li><li>B. IV、V 和 IV</li><li>C. III 和 IV</li><li>D. I、II、V、VI</li></ul><p><br></p></li><li><p>下列说法中错误的是（D）</p><blockquote><p>D错误，主频是只CPU时钟周期的倒数，而不是机器周期的倒数。</p></blockquote><ul><li>A. 主频为 $1GHz$ 的 CPU 运算性能可能强于主频为 $2GHz$ 的 CPU</li><li>B. 衡量用于科学计算的 CPU 性能的主要指标为 MFLOPS</li><li>C. 字长指计算机能直接处理的二进制信息的位数</li><li>D. 主频是指 CPU 机器周期的倒数</li></ul><p><br></p></li><li><p>计算机的机器字长为 32 位，下列说法中正确的是（A）</p><blockquote><p>A正确，CPU一次能够处理的数据长度称为机器字长。通常机器字长等于通用寄存器的长度。</p><p>通用寄存器是指一种多用途寄存器，可用于保存源操作数和计算得到的中间结果，也可以作为变址寄存器，还可以存放基地址和其他信息等。</p><p>而数据总线的宽度取决于计算机系统中的数据传输需求。它通常指定为每个时钟周期可以传输的数据位数的总数。数据总线的宽度越大，系统在单位时间内能够传输的数据量就越大。与数据传输的数据量有关</p><p>拓展: 三大总线 数据总线，地址总线，控制总线</p><p><strong>数据总线</strong><br>（1） 是CPU与内存或其他器件之间的数据传送的通道。</p><p>（2）数据总线的宽度决定了CPU和外界的数据传送速度。</p><p>（3）每条传输线一次只能传输1位二进制数据。eg: 8根数据线一次可传送一个8位二进制数据(即一个字节)。</p><p>（4）数据总线是数据线数量之和。</p><p><strong>地址总线</strong><br>（1）CPU是通过地址总线来指定存储单元的。</p><p>（2）地址总线决定了cpu所能访问的最大内存空间的大小。eg: 10根地址线能访问的最大的内存为1024位二进制数据（1024个内存单元）</p><p>（3）地址总线是地址线数量之和。</p><p><strong>控制总线</strong><br>（1）CPU通过控制总线对外部器件进行控制。</p><p>（2）控制总线的宽度决定了CPU对外部器件的控制能力。</p><p>（3）控制总线是控制线数量之和。</p><p><strong>最后总结如下：</strong> </p><p><strong>地址总线的宽度决定CPU的寻址能力；</strong> </p><p><strong>数据总线的宽度决定CPU与其他元器件一次最大传送的数据量；</strong></p><p> <strong>控制总线决定CPU对其他元器件的控制能力。</strong></p></blockquote><ul><li>A. 通用寄存器一般为 32 位</li><li>B. 数据总线宽度为 32 位</li><li>C. 支持 64 位操作系统</li><li>D. 以上说法均不正确</li></ul><p><br></p></li><li><p>若一台计算机的机器字长为 4 字节，则表明该机器（C）</p><blockquote><p>C正确，一个字节(1B) = 8b，4 个字节 即 32 位 故选择 C。</p><p>一般来说 32 位运算的最大结果位 $2^{31} - 1$ 因为是使用补码存储的数据，最高位始终为符号位。故少一位，最大能表示的数相当于 31 位二进制数 $2^{31} - 1$。</p></blockquote><ul><li>A. 能处理的数值最大为 4 位十进制数</li><li>B. 能处理的数值最多位 4 位二进制数组成</li><li>C. 在 CPU 中能够作为一个整体处理 32 位二进制代码</li><li>D. 在 CPU 中运算的结果最大位 $2^{32}$ </li></ul><p><br></p></li><li><p>MIPS（每秒百万次指令数）和 MFLOPS （每秒百万次浮点运算数）是衡量 CPU 性能的两个指标其中</p><p><strong>MIPS  适合衡量标量处理器的性能，MFLOPS 适合衡量向量处理器的性能</strong></p><blockquote><p>了解即可</p></blockquote><p><br></p></li><li><p>运算发生溢出的根本原因是（A）</p><blockquote><p>A 正确，无论采用何种机器数，只要运算结果大于数值设备所能表示数的范围，就会产生溢出。</p></blockquote><ul><li>A. 数据的位数有限</li><li>B. 运算中符号位的进位丢弃</li><li>C.  运算中将符号位的借位丢弃</li><li>D. 数据运算中的错误</li></ul><p><br></p></li><li><p>当顶点运算发生溢出时，应（C）</p><blockquote><p>C 正确，A、B、D 选项都是浮点运算时的操作。</p><p>拓展：规格化是指调整浮点数的阶码和尾数，尾数部分用纯小数给出，且小数后第一位的值不为0。</p></blockquote><ul><li>A. 向左规格化</li><li>B. 向右规格化</li><li>C. 发出出错信息</li><li>D. 舍入处理</li></ul><p><br></p></li><li><p>在补码加法运算中,产生溢出的情况是 (C)</p><blockquote><p>C 正确，常用的溢出判断方法主要有三种：采用一个符号位、采用进位位和采用变形补码</p><p>采用一个符号位的溢出条件为：结果的符号位与操作数符号位不同。</p><p>采用进位位的溢出条件为：结果的符号位和最高数位不同时产生进位。</p><p>采用双符号位（变形补码）的溢出条件为：运算结果的两个符号位不同。</p><p><strong>可以这样记，不同即溢出</strong></p></blockquote><p>I 两个操作数的符号位相同,运算时采用单符号位,结果的符号位与操作数相同 </p><p>II 两个操作数的符号位相同,运算时采用单符号位,结果的符号位与操作数不同 </p><p>III 运算时采用单符号位,结果的符号位和最高数位不同时产生进位 </p><p>IV.运算时采用单符号位,结果的符号位和最高数位相同时产生进位 </p><p>V.运算时采用双符号位,运算结果的两个符号位相同</p><p> VI.运算时采用双符号位,运算结果的两个符号位不同</p><ul><li>A. I,III,V</li><li>B. II,IV,VI</li><li>C. II,III,VI</li><li>D. I, II,VI </li></ul><p><br></p></li><li><p>将采用 8 位二进制补码表示的十进制数 -121 拓展成 16 位 二进制补码，结果用十六进制表示为（B）</p><blockquote><p>B 正确，十进制二进制 -121 的 8 位二进制原码表示为 11111001 拓展成16位则为 10000000001111001 </p><p>变为补码为 1111111110000111 变为 16 进制为 FF87H。</p></blockquote><ul><li>A. $0087H$</li><li>B. $FF87H$</li><li>C. $8079H$</li><li>D. $FFF9H$</li></ul><p><br></p></li><li><p>在串行进位的并行加法器中，影响加法器运算速度的关键因素是（C）</p><blockquote><p>C正确，四个选择均会对加法器的运算速度产生影响，但进位传递延迟的影响最为关键。因为必须要等待前一位运算完成才能进行下一位的运算。这样效率会受到很大影响。</p></blockquote><ul><li>A. 门电路的延迟</li><li>B. 元器件速度</li><li>C. 进位传递延迟</li><li>D. 各位加法器的速度的不同</li></ul><p><br></p></li><li><p>下列叙述中，不正确的是 (A)。</p><blockquote><p>A 不正确</p><p>选项A描述的原因是不正确的。串行进位加法器的加法时间长主要是因为它的进位是串行传递的，即每一位的加法结果依赖于前一位的加法和进位结果，因此必须等前一位计算完成后才能进行下一位的计算。这与串行进位加法器的高位电路复杂性无关。</p><p>选项B正确，因为在串行进位加法器中，加法的每一位都需要等前一位完成，因此位数越多，加法所需的时间也就越长。</p><p>选项C描述的是先行进位加法器的特点之一。先行进位加法器设计复杂，尤其是当位数增加时，为了实现快速进位，其电路设计会更加复杂。</p><p>选项D正确描述了串行进位加法器和先行进位加法器加法时间差异的真正原因，即进位的串行传递导致了加法时间的增加。<br>因此，不正确的叙述是A</p></blockquote><ul><li>A.串行进位加法器比先行进位加法器的加法时间长的原因是串行进位加法器高位电路复杂</li><li>B.串行进位加法器位数越多加法时间越长</li><li>C.先行进位加法器位数越高位电路越复杂</li><li>D.串行进位加法器比先行进位加法器的加法时间长的原因是串行进位加法器进位串行传递</li></ul><p><br></p></li><li><p>计算机中的累加器（B）</p><blockquote><p>B 正确，累加器又称为累加寄存器，它实质上是寄存器，没有加法器的功能。</p></blockquote><ul><li>A. 没有加法器功能，也没有寄存器功能</li><li>B. 没有加法器功能，有寄存器功能</li><li>C. 有加法器功能，没有寄存器功能</li><li>D. 有加法器功能，也有寄存器功能</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章期末复习&quot;&gt;&lt;a href=&quot;#第一章期末复习&quot; class=&quot;headerlink&quot; title=&quot;第一章期末复习&quot;&gt;&lt;/a&gt;第一章期末复习&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下列部件的位数一定与机器字长相同的是 (B)&lt;/p&gt;
&lt;p&gt;I. ALU  II.</summary>
      
    
    
    
    <category term="计算机组成原理" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理零散知识合集</title>
    <link href="http://example.com/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E5%90%88%E9%9B%86/"/>
    <id>http://example.com/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E5%90%88%E9%9B%86/</id>
    <published>2024-05-22T12:42:21.000Z</published>
    <updated>2024-05-22T12:46:43.690Z</updated>
    
    
    
    
    <category term="计算机组成原理" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="http://example.com/2024/05/22/Vue/"/>
    <id>http://example.com/2024/05/22/Vue/</id>
    <published>2024-05-22T08:17:24.000Z</published>
    <updated>2024-05-22T08:35:00.498Z</updated>
    
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://example.com/2024/05/21/Docker/"/>
    <id>http://example.com/2024/05/21/Docker/</id>
    <published>2024-05-21T15:11:00.000Z</published>
    <updated>2024-05-25T06:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><p><img src="/2024/05/21/Docker/image-20240522193558516.png" alt="image-20240522193558516"></p><p>注意先通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><p>进入管理员身份后再运行此代码</p><p><img src="/2024/05/21/Docker/image-20240522194049350.png" alt="image-20240522194049350"></p><p><img src="/2024/05/21/Docker/image-20240522194056836.png" alt="image-20240522194056836"></p><p><img src="/2024/05/21/Docker/image-20240522194103643.png" alt="image-20240522194103643"><img src="/2024/05/21/Docker/image-20240522194112899.png" alt="image-20240522194112899"></p><p><img src="/2024/05/21/Docker/image-20240522194127316.png" alt="image-20240522194127316"></p><p><img src="/2024/05/21/Docker/image-20240522194132604.png" alt="image-20240522194132604"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="部署-MySQL"><a href="#部署-MySQL" class="headerlink" title="部署 MySQL"></a>部署 MySQL</h3><p>控制台输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line">  <span class="literal">--name</span> mysql \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">  <span class="literal">-e</span> TZ=Asia/Shanghai \</span><br><span class="line">  <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123</span> \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>大家可以发现，当我们执行命令后，Docker做的第一件事情，是去自动搜索并下载了MySQL，然后会自动运行MySQL，我们完全不用插手，是不是非常方便。</p><p>而且，这种安装方式你完全不用考虑运行的操作系统环境，它不仅仅在CentOS系统是这样，在Ubuntu系统、macOS系统、甚至是装了WSL的Windows下，都可以使用这条命令来安装MySQL。</p><p>要知道，<strong>不同操作系统下其安装包、运行环境是都不相同的</strong>！如果是<strong>手动安装，必须手动解决安装包不同、环境不同的、配置不同的问题</strong>！</p><p>而使用Docker，这些完全不用考虑。就是因为Docker会自动搜索并下载MySQL。注意：这里下载的不是安装包，而是<strong>镜像。</strong>镜像中不仅包含了MySQL本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为<strong>容器</strong>。</p><h3 id><a href="#" class="headerlink" title=" "></a> </h3><h3 id="命令解读"><a href="#命令解读" class="headerlink" title="命令解读"></a>命令解读</h3><ul><li>docker run : 创建并运行一个容器 ， -d 是让容器在后台运行</li><li>—name mysql : 给容器起个名字，必须唯一</li><li>-p 3306:3306: 设置端口映射 (第一个参数是宿主机端口，第二个容器内的端口)</li><li>-e KEY=VALUE：是设置环境变量</li><li>mysql：指定运行的镜像的名称</li></ul><p><img src="/2024/05/21/Docker/image-20240522200954333.png" alt="image-20240522200954333"></p><h2 id="Docker-基础"><a href="#Docker-基础" class="headerlink" title="Docker 基础"></a>Docker 基础</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ul><li>docker pull 镜像名  — 拉取对应镜像</li><li>docker images — 查看所有镜像</li><li>docker save -o nginx.tar nginx:latest —将nginx镜像保存到本地</li><li>docker rmi 镜像名 —删除镜像</li><li>docker load -i nginx.tar —通过本地保存的 nginx.tar 重新下载该镜像</li></ul><p><img src="/2024/05/21/Docker/image-20240525122552516.png" alt="image-20240525122552516"></p><p>使用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>命令拉取 nginx 镜像</p><p>将 nginx 保存到本地</p><p><img src="/2024/05/21/Docker/image-20240525123459765.png" alt="image-20240525123459765"></p><p>将删除的 nginx 镜像通过本地的 tar 重新下载回来</p><p><img src="/2024/05/21/Docker/image-20240525123726413.png" alt="image-20240525123726413"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;h2 id=&quot;Docker的安装&quot;&gt;&lt;a href=&quot;#Docker的安装&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Java后端" scheme="http://example.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="微服务" scheme="http://example.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="http://example.com/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</id>
    <published>2024-05-21T14:23:49.000Z</published>
    <updated>2024-05-26T07:26:00.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四章-指令系统"><a href="#第四章-指令系统" class="headerlink" title="第四章 指令系统"></a>第四章 指令系统</h1><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><ol><li>零地址指令<img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522201906602.png" alt="image-20240522201906602"></li></ol><ol><li><p>一地址指令<img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522202200028.png" alt="image-20240522202200028"></p></li><li><p>二、三地址指令<img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522202356914.png" alt="image-20240522202356914"></p></li><li><p>四地址指令<img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522202516755.png" alt="image-20240522202516755"></p></li></ol><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522202625420.png" alt="image-20240522202625420"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522203014082.png" alt="image-20240522203014082"></p><h2 id="扩展操作码指令格式"><a href="#扩展操作码指令格式" class="headerlink" title="扩展操作码指令格式"></a>扩展操作码指令格式</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522203441907.png" alt="image-20240522203441907"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522203822773.png" alt="image-20240522203822773"></p><h2 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h2><h3 id="顺序寻址"><a href="#顺序寻址" class="headerlink" title="顺序寻址"></a>顺序寻址</h3><ul><li>顺序寻址即为一条一条往下执行，每次 <strong>PC</strong> 加  ‘1’  这里的  1 可以理解为 1 个指令字长， 实际加的值会因为指令长度、编址方式而不同</li></ul><h3 id="跳跃寻址"><a href="#跳跃寻址" class="headerlink" title="跳跃寻址"></a>跳跃寻址</h3><ul><li>由转移指令指出，类似于 <strong>goto</strong> 的使用，即无条件转移把 <strong>PC</strong> 中的内容改成转移指令给出的值</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522205251877.png" alt="image-20240522205251877"></p><h2 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h2><h3 id="直接寻址-灵活性较差"><a href="#直接寻址-灵活性较差" class="headerlink" title="直接寻址 (灵活性较差)"></a>直接寻址 (灵活性较差)</h3><ul><li>给出的形式地址即为真实地址</li></ul><h3 id="间接寻址"><a href="#间接寻址" class="headerlink" title="间接寻址"></a>间接寻址</h3><ul><li><p>偏移寻址</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/4f1192267a3ff434eb63a32dae83cb6.jpg" alt="4f1192267a3ff434eb63a32dae83cb6"></p></li></ul><h2 id="微指令格式"><a href="#微指令格式" class="headerlink" title="微指令格式"></a>微指令格式</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/d770491f181a338bde51c0ce9b336d6.jpg" alt="d770491f181a338bde51c0ce9b336d6"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/b14c43996e4b4641ae0e9e3726db8cd.jpg" alt="b14c43996e4b4641ae0e9e3726db8cd"></p><p><br></p><h1 id="第五章-CPU"><a href="#第五章-CPU" class="headerlink" title="第五章 CPU"></a>第五章 CPU</h1><h2 id="CPU-的功能"><a href="#CPU-的功能" class="headerlink" title="CPU 的功能"></a>CPU 的功能</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/2cbd0037e354023bf22c4b28b82db6f.jpg" alt="2cbd0037e354023bf22c4b28b82db6f"></p><h2 id="运算器-控制器的功能"><a href="#运算器-控制器的功能" class="headerlink" title="运算器 控制器的功能"></a>运算器 控制器的功能</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/359208b40a6088c79b8c1bde73ec1be.jpg" alt="359208b40a6088c79b8c1bde73ec1be"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/8cb0b550184b5561e80e09836d938b0.jpg" alt="8cb0b550184b5561e80e09836d938b0"></p><h1 id="第五章-总线"><a href="#第五章-总线" class="headerlink" title="第五章 总线"></a>第五章 总线</h1><h2 id="总线的分类"><a href="#总线的分类" class="headerlink" title="总线的分类"></a>总线的分类</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/90ce03e7761cee0e33ce1472496cee8.jpg" alt="90ce03e7761cee0e33ce1472496cee8"></p><h2 id="总线的特性"><a href="#总线的特性" class="headerlink" title="总线的特性"></a>总线的特性</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/9a6fbe112cc28248927b4308686d637.jpg" alt="9a6fbe112cc28248927b4308686d637"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第四章-指令系统&quot;&gt;&lt;a href=&quot;#第四章-指令系统&quot; class=&quot;headerlink&quot; title=&quot;第四章 指令系统&quot;&gt;&lt;/a&gt;第四章 指令系统&lt;/h1&gt;&lt;h2 id=&quot;指令格式&quot;&gt;&lt;a href=&quot;#指令格式&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="计算机组成原理" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="http://example.com/2024/05/21/MybatisPlus/"/>
    <id>http://example.com/2024/05/21/MybatisPlus/</id>
    <published>2024-05-21T14:11:35.000Z</published>
    <updated>2024-05-22T11:26:54.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MybatisPlus-核心功能"><a href="#MybatisPlus-核心功能" class="headerlink" title="MybatisPlus 核心功能"></a>MybatisPlus 核心功能</h1><h2 id="IService-批量处理"><a href="#IService-批量处理" class="headerlink" title="IService 批量处理"></a>IService 批量处理</h2><p>开启 rewriteBatchedStatements = true 参数可以使得批量插入速度得到提升(数量越大提升越明显)</p><h1 id="MybatisPlus-拓展功能"><a href="#MybatisPlus-拓展功能" class="headerlink" title="MybatisPlus 拓展功能"></a>MybatisPlus 拓展功能</h1><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><blockquote><p>即根据数据库表结构自动生成对应代码</p></blockquote><ol><li><p>安装插件 MybatisPlus</p></li><li><p>点击 idea 导航栏中的 Other 连接对应数据库 (注意要加上对应时区) <img src="/2024/05/21/MybatisPlus/image-20240521224805193.png" alt="image-20240521224805193"></p></li><li><p>进行代码生成 <img src="/2024/05/21/MybatisPlus/image-20240521225037648.png" alt="image-20240521225037648"></p><p>生成的效果如下 (仅展示实体类部分)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="meta">@author</span> author</span><br><span class="line"> * <span class="meta">@since</span> <span class="number">2024</span>-<span class="number">05</span>-<span class="number">21</span></span><br><span class="line"> */</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;address&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></li></ol><h2 id="DB静态工具"><a href="#DB静态工具" class="headerlink" title="DB静态工具"></a>DB静态工具</h2><ol><li>当需要使用多个 Service 直接相互调用的时候可以使用 DB静态工具 用法如下<img src="/2024/05/21/MybatisPlus/image-20240522183819638.png" alt="image-20240522183819638"></li></ol><p>根据用户 id 在另一个 address 表中查询其地址信息</p><ol><li>实现 ‘1’ 中的批量查询功能，根据 ids 查询多个用户的地址信息</li></ol><p><img src="/2024/05/21/MybatisPlus/image-20240522184819197.png" alt="image-20240522184819197"></p><p><img src="/2024/05/21/MybatisPlus/image-20240522184729262.png" alt="image-20240522184729262"></p><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>即根据代码逻辑模拟删除，但并不会真正删除。思路如下：</p><ul><li>在表中添加一个字段标记数据是否被删除</li><li>当删除数据时把标记置为1</li><li>查询时只查询标记为0的数据</li></ul><p><img src="/2024/05/21/MybatisPlus/image-20240522185243382.png" alt="image-20240522185243382"></p><p>只需要在 yml 中配置逻辑删除字段即可</p><h2 id="枚举处理器"><a href="#枚举处理器" class="headerlink" title="枚举处理器"></a>枚举处理器</h2><p><img src="/2024/05/21/MybatisPlus/image-20240522190049159.png" alt="image-20240522190049159"></p><h2 id="JSON-处理器"><a href="#JSON-处理器" class="headerlink" title="JSON 处理器"></a>JSON 处理器</h2><p><img src="/2024/05/21/MybatisPlus/image-20240522190411764.png" alt="image-20240522190411764"></p><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><h3 id="分页插件的基本使用"><a href="#分页插件的基本使用" class="headerlink" title="分页插件的基本使用"></a>分页插件的基本使用</h3><ol><li><p>配置分页插件的拦截器<img src="/2024/05/21/MybatisPlus/image-20240522190948343.png" alt="image-20240522190948343"></p></li><li><p>使用分页的工具<img src="/2024/05/21/MybatisPlus/image-20240522191007640.png" alt="image-20240522191007640"></p></li></ol><h3 id="通用分页实体"><a href="#通用分页实体" class="headerlink" title="通用分页实体"></a>通用分页实体</h3><ol><li><p>案例<img src="/2024/05/21/MybatisPlus/image-20240522191217367.png" alt="image-20240522191217367"></p></li><li><p>代码如下<img src="/2024/05/21/MybatisPlus/image-20240522191711694.png" alt="image-20240522191711694"></p></li></ol><p><img src="/2024/05/21/MybatisPlus/image-20240522191723171.png" alt="image-20240522191723171"></p><h3 id="通用分页实体与-mp-转换"><a href="#通用分页实体与-mp-转换" class="headerlink" title="通用分页实体与 mp 转换"></a>通用分页实体与 mp 转换</h3><p>将构建分页条件和封装 VO 结果写在实体方法里面 最后再在业务中调用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MybatisPlus-核心功能&quot;&gt;&lt;a href=&quot;#MybatisPlus-核心功能&quot; class=&quot;headerlink&quot; title=&quot;MybatisPlus 核心功能&quot;&gt;&lt;/a&gt;MybatisPlus 核心功能&lt;/h1&gt;&lt;h2 id=&quot;IService-</summary>
      
    
    
    
    <category term="Java后端" scheme="http://example.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="微服务" scheme="http://example.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/05/20/hello-world/"/>
    <id>http://example.com/2024/05/20/hello-world/</id>
    <published>2024-05-20T14:09:08.625Z</published>
    <updated>2024-05-21T07:57:05.908Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一篇博客</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是我的第一篇博客&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
