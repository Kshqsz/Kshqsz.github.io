<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kshqsz&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-25T07:56:32.112Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kshqsz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>灵茶の试炼</title>
    <link href="http://example.com/2024/06/25/%E7%81%B5%E8%8C%B6%E3%81%AE%E8%AF%95%E7%82%BC/"/>
    <id>http://example.com/2024/06/25/%E7%81%B5%E8%8C%B6%E3%81%AE%E8%AF%95%E7%82%BC/</id>
    <published>2024-06-25T07:07:01.000Z</published>
    <updated>2024-06-25T07:56:32.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024-6-25"><a href="#2024-6-25" class="headerlink" title="2024-6-25"></a>2024-6-25</h1><p>题目链接：<a href="https://codeforces.com/contest/1883/problem/F">https://codeforces.com/contest/1883/problem/F</a></p><p><img src="/2024/06/25/%E7%81%B5%E8%8C%B6%E3%81%AE%E8%AF%95%E7%82%BC/image-20240625152305934.png" alt="image-20240625152305934"></p><p>分析：</p><p>考察子数组最左边和最右边的元素。 </p><p>条件一：子数组最左边的元素 a[L]，其左侧不能有等于 a[L] 的元素，否则子序列不唯一。 </p><p>条件二：子数组最右边的元素 a[R]，其右侧不能有等于 a[R] 的元素，否则子序列不唯一。 </p><p> 结论：满足这两个条件，则子序列是唯一的。 </p><p>证明：用反证法证明。 假设子序列不唯一，那么另一个子序列的不同下标一定位于 [L,R] 内部（如果位于 [L,R] 外面就破坏了条件一或条件二），但是这个范围内的所有下标我们都选了，不可能存在一个子序列没有而另一个子序列有的情况，矛盾，故原命题成立。  </p><p>怎么计算子数组个数呢？ </p><p>前后缀分解。 处理出每个 a[i] 首次和最后一次出现的位置。（实际只需要处理最后一次） 枚举 a[i] 作为左端点，那么 a[i] 必须是首次出现的元素，我们还需要知道 &gt;=i 的且是最后一次出现的元素的个数，具体见代码。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        mp[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    i64 ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> re = mp.<span class="built_in">size</span>();</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt; vis;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[a[i]]) &#123;</span><br><span class="line">            vis[a[i]] = <span class="literal">true</span>;</span><br><span class="line">            ans += re;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mp[a[i]] &lt;= i) &#123;</span><br><span class="line">            re--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    <span class="built_in">dir</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">        <span class="built_in">dir</span>[x] = i</span><br><span class="line">    r = <span class="built_in">len</span>(<span class="built_in">dir</span>)</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    vis = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> vis:</span><br><span class="line">            vis[x] = <span class="literal">True</span></span><br><span class="line">            ans += r</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">dir</span>[x] &lt;= i: r -= <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">input</span>())):</span><br><span class="line">    solve()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024-6-25&quot;&gt;&lt;a href=&quot;#2024-6-25&quot; class=&quot;headerlink&quot; title=&quot;2024-6-25&quot;&gt;&lt;/a&gt;2024-6-25&lt;/h1&gt;&lt;p&gt;题目链接：&lt;a href=&quot;https://codeforces.com/conte</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 952 (Div. 4)</title>
    <link href="http://example.com/2024/06/12/Codeforces-Round-952-Div-4/"/>
    <id>http://example.com/2024/06/12/Codeforces-Round-952-Div-4/</id>
    <published>2024-06-12T11:15:22.000Z</published>
    <updated>2024-06-13T00:02:33.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="H1-Maximize-the-Largest-Component-Easy-Version"><a href="#H1-Maximize-the-Largest-Component-Easy-Version" class="headerlink" title="H1. Maximize the Largest Component (Easy Version)"></a>H1. Maximize the Largest Component (Easy Version)</h1><p><strong>题意: </strong> 给定 $n\times m$ 矩阵，由’#‘ 和 ’.’组成。你可以使得某一行或者某一列全变为 ‘#’，统计这一操作之后最大的’ #’的连通块大小。</p><p><strong>分析:</strong></p><ul><li><p>法一：通过 dfs 遍历矩阵后记录连通块大小以及连通块编号。然后枚举某一行或者某一列全变为’#‘ 后与相邻行列进行合并后的连通块大小即可。</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1E9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">g</span><span class="params">(n)</span></span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (m));</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">vis</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (m));</span><br><span class="line">    vector&lt;array&lt;<span class="type">int</span>, 2&gt;&gt; dir = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; g[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sz = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    vector&lt;array&lt;<span class="type">int</span>, 2&gt;&gt; record;</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        vis[x][y] = sign;</span><br><span class="line">        sz++;</span><br><span class="line">        record.<span class="built_in">push_back</span>(&#123;x, y&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> dx = x + dir[i][<span class="number">0</span>], dy = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (dx &lt; <span class="number">0</span> || dy &lt; <span class="number">0</span> || dx &gt;= n || dy &gt;= m) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (vis[dx][dy] || g[dx][dy] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dfs</span>(dx, dy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; !vis[i][j]) &#123;</span><br><span class="line">                sz = <span class="number">0</span>;</span><br><span class="line">                record.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="built_in">dfs</span>(i, j);</span><br><span class="line">                sign++;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : record) &#123;</span><br><span class="line">                    mp[x][y] = sz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> r = <span class="built_in">max</span>(<span class="number">0</span>, i - <span class="number">1</span>); r &lt;= <span class="built_in">min</span>(n - <span class="number">1</span>, i + <span class="number">1</span>); r++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[vis[r][j]]) &#123;</span><br><span class="line">                    st[vis[r][j]] = <span class="number">1</span>;</span><br><span class="line">                    cur += mp[r][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="built_in">max</span>(<span class="number">0</span>, j - <span class="number">1</span>); c &lt;= <span class="built_in">min</span>(m - <span class="number">1</span>, j + <span class="number">1</span>); c++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[vis[i][c]]) &#123;</span><br><span class="line">                    st[vis[i][c]] = <span class="number">1</span>;</span><br><span class="line">                    cur += mp[i][c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, cur);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; mx &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>法二：使用 并查集(DSU)进行连通块合并以及统计大小编号可以更方便，注意将下标二维转为一维的时候行坐标一定是乘m，这样有唯一性，因为后面加的列坐标一定小于 m。</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f, siz;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n): <span class="built_in">f</span>(n), <span class="built_in">siz</span>(n, <span class="number">1</span>) &#123;<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != f[x]) x = f[x] = f[f[x]];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        f[y] = x; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">s</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> N = n * m + <span class="number">1</span>;</span><br><span class="line">    <span class="function">DSU <span class="title">dsu</span><span class="params">(N)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt;= n - <span class="number">1</span> &amp;&amp; s[i][j] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; s[i + <span class="number">1</span>][j] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                dsu.<span class="built_in">merge</span>(i * m + j, (i + <span class="number">1</span>) * m + j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= m - <span class="number">1</span> &amp;&amp; s[i][j] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; s[i][j + <span class="number">1</span>] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                dsu.<span class="built_in">merge</span>(i * m + j, i * m + j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(N, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> r = <span class="built_in">max</span>(<span class="number">0</span>, i - <span class="number">1</span>); r &lt;= <span class="built_in">min</span>(n - <span class="number">1</span>, i + <span class="number">1</span>); r++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[r][j] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> u = dsu.<span class="built_in">find</span>(r * m + j);</span><br><span class="line">                    <span class="keyword">if</span> (vis[u] != i) &#123;</span><br><span class="line">                        vis[u] = i;</span><br><span class="line">                        res += dsu.<span class="built_in">size</span>(u);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, res);</span><br><span class="line">    &#125;</span><br><span class="line">    vis.<span class="built_in">assign</span>(N, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="built_in">max</span>(<span class="number">0</span>, j - <span class="number">1</span>); c &lt;= <span class="built_in">min</span>(m - <span class="number">1</span>, j + <span class="number">1</span>); c++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i][c] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> u = dsu.<span class="built_in">find</span>(i * m + c);</span><br><span class="line">                    <span class="keyword">if</span> (vis[u] != j) &#123;</span><br><span class="line">                        vis[u] = j;</span><br><span class="line">                        res += dsu.<span class="built_in">size</span>(u);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, res);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;H1-Maximize-the-Largest-Component-Easy-Version&quot;&gt;&lt;a href=&quot;#H1-Maximize-the-Largest-Component-Easy-Version&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codeforces" scheme="http://example.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Global Round 26</title>
    <link href="http://example.com/2024/06/10/Codeforces-Global-Round-26/"/>
    <id>http://example.com/2024/06/10/Codeforces-Global-Round-26/</id>
    <published>2024-06-10T07:49:48.000Z</published>
    <updated>2024-06-10T07:54:56.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C2-Magnitude-Hard-Version"><a href="#C2-Magnitude-Hard-Version" class="headerlink" title="C2. Magnitude (Hard Version)"></a>C2. Magnitude (Hard Version)</h1><p><strong>题意: </strong> 给定数组 a 和 初始数字 c = 0, 依次遍历 a，每一步可以 c = c + a[i]，或者 c = abs(c + a[i])，求最后获得最大值的方案数</p><p><strong>分析: </strong> $dp$ 即可，遍历数组的同时遍历上一次个dp 数组中的最大值和最小值的方案数，记录方案数，类似 01背包记录方案书，很容易知道最终答案一定是每一步的最小值或者最大值转移而来</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map&lt;i64, i64&gt; dp;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        map&lt;i64, i64&gt; dp1;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : dp) &#123;</span><br><span class="line">            dp1[x + a[i]] = (dp1[x + a[i]] + y) % mod;</span><br><span class="line">            dp1[<span class="built_in">abs</span>(x + a[i])] = (dp1[<span class="built_in">abs</span>(x + a[i])] + y) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        dp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : dp1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == dp1.<span class="built_in">rbegin</span>() -&gt; first || x == dp1.<span class="built_in">begin</span>() -&gt; first) &#123; <span class="comment">// y 为最大值或者最小值时的方案数</span></span><br><span class="line">                dp[x] = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> &amp;[x, y] = *dp.<span class="built_in">rbegin</span>();</span><br><span class="line">    cout &lt;&lt; y &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C2-Magnitude-Hard-Version&quot;&gt;&lt;a href=&quot;#C2-Magnitude-Hard-Version&quot; class=&quot;headerlink&quot; title=&quot;C2. Magnitude (Hard Version)&quot;&gt;&lt;/a&gt;C2. Magn</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codeforces" scheme="http://example.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 950 (Div. 3)</title>
    <link href="http://example.com/2024/06/04/Codeforces-Round-950-Div-3/"/>
    <id>http://example.com/2024/06/04/Codeforces-Round-950-Div-3/</id>
    <published>2024-06-04T04:32:04.000Z</published>
    <updated>2024-06-04T04:58:58.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="D-GCD-sequence"><a href="#D-GCD-sequence" class="headerlink" title="D. GCD-sequence"></a>D. GCD-sequence</h1><p><strong>题意:</strong> 给定数组一个数组，问是否可以从数组中去掉一个数之后使得相邻两个数的 $gcd$ 非递减。</p><p><strong>分析: </strong> 前后缀分解即可，然后判断删除某个数之后是否符合条件，注意首尾的特判，以及下标之间的转化。</p><p><strong>代码如下:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">pre</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">suf</span><span class="params">(n + <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    pre[<span class="number">0</span>] = pre[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    suf[n] = suf[n - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        b[i] = <span class="built_in">gcd</span>(a[i], a[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + <span class="number">1</span> &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        pre[i + <span class="number">1</span>] = pre[i] &amp;&amp; (b[i] &lt;= b[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        suf[i + <span class="number">1</span>] = suf[i + <span class="number">2</span>] &amp;&amp; (b[i + <span class="number">1</span>] &lt;= b[i + <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (pre[n - <span class="number">2</span>] || suf[<span class="number">2</span>]) &#123;</span><br><span class="line">        ok = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    b[n] = <span class="number">2E9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + <span class="number">1</span> &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> g = <span class="built_in">gcd</span>(a[i - <span class="number">1</span>], a[i + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (pre[i - <span class="number">1</span>] &amp;&amp; suf[i + <span class="number">2</span>] &amp;&amp; g &gt;= b[i - <span class="number">1</span>] &amp;&amp; g &lt;= b[i + <span class="number">2</span>]) &#123;</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (ok ? <span class="string">&quot;YES\n&quot;</span> : <span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Permutation-of-Rows-and-Columns"><a href="#E-Permutation-of-Rows-and-Columns" class="headerlink" title="E. Permutation of Rows and Columns"></a>E. Permutation of Rows and Columns</h1><p> <strong>题意:</strong> 给定二维矩阵 a 和 b，问是否能只通过行与行之间的变换与列与列之间的变换使得 a = b，注意矩阵中的数字是一个排列。</p><p><strong>分析:</strong> 暴力模拟即可，通过哈希记录 a 中的数的行列号，然后遍历矩阵 b，依次进行行变换和列变换，每次变换后哈希记录 a 中的数的行列号需要变化。</p><p><strong>代码如下</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (m)), <span class="built_in">b</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (m));</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; rowa, cola;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">            rowa[a[i][j]] = i;</span><br><span class="line">            cola[a[i][j]] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; b[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//row swap</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> r = rowa[b[i][<span class="number">0</span>]];</span><br><span class="line">        <span class="comment">// update the hash</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i][j], a[r][j]);</span><br><span class="line">            rowa[a[i][j]] = i;</span><br><span class="line">            rowa[a[r][j]] = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// col swap</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="type">int</span> c = cola[b[<span class="number">0</span>][j]];</span><br><span class="line">        <span class="comment">// update the hash</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i][j], a[i][c]);</span><br><span class="line">            cola[a[i][j]] = j;</span><br><span class="line">            cola[a[i][c]] = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (a == b ? <span class="string">&quot;YES\n&quot;</span> : <span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;D-GCD-sequence&quot;&gt;&lt;a href=&quot;#D-GCD-sequence&quot; class=&quot;headerlink&quot; title=&quot;D. GCD-sequence&quot;&gt;&lt;/a&gt;D. GCD-sequence&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;题意:&lt;/strong&gt;</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codeforces" scheme="http://example.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 166 (Rated for Div. 2)</title>
    <link href="http://example.com/2024/06/02/Educational-Codeforces-Round-166-Rated-for-Div-2/"/>
    <id>http://example.com/2024/06/02/Educational-Codeforces-Round-166-Rated-for-Div-2/</id>
    <published>2024-06-02T11:14:54.000Z</published>
    <updated>2024-06-02T13:37:00.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-Job-Interview"><a href="#C-Job-Interview" class="headerlink" title="C. Job Interview"></a>C. Job Interview</h1><p><strong>题意:</strong> 给定 n 个 A 工作，m 个 B 工作。现在总共有 n + m + 1 个候选人，每一个候选人有 能力值 va 和 能力值 vb，分别代表工作 A 的能力值和工作 B 的能力值。公司从前往后选择候选人，选择让这个候选人去能力高的那一项，如果这个工作已经满了，那么这个候选人则智能做另一项还有空缺的工作。</p><p><strong>分析:</strong> 首先,肯定有且只有一种工作满足偏好这种工作的人数量超过提供工作的数量. 假设偏好这种工作的人共有𝑥人,需要𝑦人,如果被删除的人不是前𝑦个偏好这种工作的人,则一定是前𝑦个偏好该工作的人选择该工作剩下的人选择另一份工作.</p><p>如果被删除的人是前𝑦个个人,那么会有第𝑦+1个偏好该工作的人补上,然后剩下的人选另一种工作.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + m + <span class="number">1</span>)</span>, <span class="title">b</span><span class="params">(n + m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    i64 sa = <span class="number">0</span>, sb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n + m + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        sa += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n + m + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">        sb += b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; pos[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n + m + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        pos[a[i] &lt; b[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pos[<span class="number">1</span>].<span class="built_in">size</span>() &gt;= m + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(n, m);</span><br><span class="line">        <span class="built_in">swap</span>(pos[<span class="number">0</span>], pos[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">swap</span>(sa, sb);</span><br><span class="line">        <span class="built_in">swap</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    i64 suma = <span class="number">0</span>, sumb = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">like</span><span class="params">(n + m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        suma += a[pos[<span class="number">0</span>][i]];</span><br><span class="line">        sumb += b[pos[<span class="number">0</span>][i]];</span><br><span class="line">        like[pos[<span class="number">0</span>][i]] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n + m + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!like[i]) &#123;</span><br><span class="line">            cout &lt;&lt; suma + sb - sumb - b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; suma - a[i] + a[pos[<span class="number">0</span>][n]] + sb - sumb - b[pos[<span class="number">0</span>][n]] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-Job-Interview&quot;&gt;&lt;a href=&quot;#C-Job-Interview&quot; class=&quot;headerlink&quot; title=&quot;C. Job Interview&quot;&gt;&lt;/a&gt;C. Job Interview&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;题意:&lt;/str</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codeforces" scheme="http://example.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 948 (Div. 2)</title>
    <link href="http://example.com/2024/05/27/Codeforces-Round-948-Div-2/"/>
    <id>http://example.com/2024/05/27/Codeforces-Round-948-Div-2/</id>
    <published>2024-05-27T09:59:07.000Z</published>
    <updated>2024-05-30T11:43:09.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="B-Binary-Colouring"><a href="#B-Binary-Colouring" class="headerlink" title="B. Binary Colouring"></a>B. Binary Colouring</h1><p>题意：给定一个数 x，求数组 a 使得 $x = \sum\limits_{i = 0}^{n-1}a_i\times2^i$ 数组 a 的长度不超过 32，a 的值为 1，-1， 0 中的一个，每两个连续的数必须有一个   0。</p><p><img src="/2024/05/27/Codeforces-Round-948-Div-2/image-20240527180250314.png" alt="image-20240527180250314"></p><p>分析: 对于一个二进制数，将连续的1变成-1，0，1的组合，如3 = 4 - 1, 即从 11 -&gt; -101，又如11011 -&gt; -10111 -&gt; -10-1001。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bit</span><span class="params">(<span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> tmp = x;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp) &#123;</span><br><span class="line">        bit[cnt] = (tmp &amp; <span class="number">1</span>);</span><br><span class="line">        tmp /= <span class="number">2</span>;                      </span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bit[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> r = i;</span><br><span class="line">        <span class="keyword">while</span> (r &lt; <span class="number">33</span> &amp;&amp; bit[r] == <span class="number">1</span>) &#123;</span><br><span class="line">            r++;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (r == i + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = i; l &lt; r; l++) &#123;</span><br><span class="line">            bit[l] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bit[i] = <span class="number">-1</span>;</span><br><span class="line">        bit[r] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">32</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; bit[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br></p><h1 id="C-Nikita-and-LCM"><a href="#C-Nikita-and-LCM" class="headerlink" title="C. Nikita and LCM"></a>C. Nikita and LCM</h1><p>题意： 在数组 a 中找最长的子序列(可以不连续)，使得这些数的 $lcm$ 不包含在数组 a 中。</p><p>分析：若所有数的 lcm 大于数组最大值，可全选。否则所有数，或者选的数一定是 lcm 的约数。所以暴力枚举这个 lcm 的所有约数即可。因为 lcm 不大于数组最大值，不会超过 $1E9$,  所以复杂度为可行的 $\sqrt{lcm}$  。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    i64 x = <span class="number">1</span>, inf = <span class="number">1E9</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        x = <span class="built_in">min</span>(<span class="built_in">lcm</span>(x, a[i]), inf);</span><br><span class="line">    &#125;</span><br><span class="line">    ranges::<span class="built_in">sort</span>(a);</span><br><span class="line">    <span class="keyword">if</span> (x &gt; a.<span class="built_in">back</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; n &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; <span class="built_in">s</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; fa;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i * i &lt;= x; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!s.<span class="built_in">contains</span>(i)) &#123;</span><br><span class="line">                    fa.<span class="built_in">insert</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!s.<span class="built_in">contains</span>(x / i)) &#123;</span><br><span class="line">                    fa.<span class="built_in">insert</span>(x / i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;fact : fa) &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it : a) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fact % it == <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    l = <span class="built_in">lcm</span>(l, it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l == fact) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;B-Binary-Colouring&quot;&gt;&lt;a href=&quot;#B-Binary-Colouring&quot; class=&quot;headerlink&quot; title=&quot;B. Binary Colouring&quot;&gt;&lt;/a&gt;B. Binary Colouring&lt;/h1&gt;&lt;p&gt;题意：给</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codeforces" scheme="http://example.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 947 (Div.1 + Div.2)</title>
    <link href="http://example.com/2024/05/26/Codeforces-Round-947-Div-1-Div-2/"/>
    <id>http://example.com/2024/05/26/Codeforces-Round-947-Div-1-Div-2/</id>
    <published>2024-05-26T05:07:01.000Z</published>
    <updated>2024-05-30T11:43:03.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="D-Paint-the-Tree"><a href="#D-Paint-the-Tree" class="headerlink" title="D. Paint the Tree"></a>D. Paint the Tree</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>​    给定一颗无向树，树上有两颗棋子初始位于 a 和 b 两个点 棋子 2 可以将棋子 1 走过的地方染色，问染完整棵树需要的最少步数是多少 。(一步是指棋子 1 先走一步，棋子 2 再走一步)</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>​    找到棋子1 和 2 的中点，让棋子 1 和 2 走到一起，以此点为根 dfs 跑这颗树，经过所有点即可。首先考虑走完整颗树后回到根节点，需要每条边走恰好两次，总步数为 $2 \times (n - 1)$。因为最后染色完并不要求回到根，所以考虑停在哪里是最优的，很明显停在深度最大的地方是最优的。所以总步数为 $2 \times(n - 1) - max(depth)$，加上一开始让棋子 1 和 2 相遇所需要的步数即为最终答案。如何找到棋子 1和 2 的中点，只需要以 a 为根在 dfs  过程中记录 parent，然后从 b 开始方向遍历即可找到 a ~ b 这条链，最后取 $link[size / 2]$ 即为中点，同时相遇所需要的步数为 $ size / 2$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    a--, b--;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; g[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u--, v--;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">parent</span><span class="params">(n)</span>, <span class="title">depth</span><span class="params">(n)</span></span>;</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> p) &#123;</span><br><span class="line">        parent[u] = p;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : g[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != p) &#123;</span><br><span class="line">                depth[v] = depth[u] + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(v, u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(a, <span class="number">-1</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; link;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b; i != <span class="number">-1</span>; i = parent[i]) &#123;</span><br><span class="line">        link.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    depth.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> lenth = link.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> root = link[lenth / <span class="number">2</span>], cost = lenth / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(root, <span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> max_depth = ranges::<span class="built_in">max</span>(depth);</span><br><span class="line">    cout &lt;&lt; <span class="number">2</span> * (n - <span class="number">1</span>) - max_depth + cost &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;D-Paint-the-Tree&quot;&gt;&lt;a href=&quot;#D-Paint-the-Tree&quot; class=&quot;headerlink&quot; title=&quot;D. Paint the Tree&quot;&gt;&lt;/a&gt;D. Paint the Tree&lt;/h1&gt;&lt;h2 id=&quot;题意&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="codeforces" scheme="http://example.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE</title>
    <link href="http://example.com/2024/05/23/JavaEE/"/>
    <id>http://example.com/2024/05/23/JavaEE/</id>
    <published>2024-05-23T00:12:31.000Z</published>
    <updated>2024-05-30T11:43:22.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="商品信息管理系统"><a href="#商品信息管理系统" class="headerlink" title="商品信息管理系统"></a>商品信息管理系统</h1><h2 id="所有项目源码-Kshqsz-GoodsServiceManager-github-com"><a href="#所有项目源码-Kshqsz-GoodsServiceManager-github-com" class="headerlink" title="所有项目源码: Kshqsz/GoodsServiceManager (github.com)"></a>所有项目源码: <a href="https://github.com/Kshqsz/GoodsServiceManager">Kshqsz/GoodsServiceManager (github.com)</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;商品信息管理系统&quot;&gt;&lt;a href=&quot;#商品信息管理系统&quot; class=&quot;headerlink&quot; title=&quot;商品信息管理系统&quot;&gt;&lt;/a&gt;商品信息管理系统&lt;/h1&gt;&lt;h2 id=&quot;所有项目源码-Kshqsz-GoodsServiceManager-github-</summary>
      
    
    
    
    <category term="Java后端" scheme="http://example.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理上课笔记</title>
    <link href="http://example.com/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/</id>
    <published>2024-05-22T15:39:59.000Z</published>
    <updated>2024-06-16T15:13:14.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一次-期末复习"><a href="#第一次-期末复习" class="headerlink" title="第一次 期末复习"></a>第一次 期末复习</h1><ol><li><p>下列部件的位数一定与机器字长相同的是 ()</p><p>I. ALU  II. 指令寄存器  III.通用寄存器  IV.浮点寄存器</p><ul><li>A. I、II</li><li>B. I、III</li><li>C. II、III</li><li>D. II、III、IV</li></ul><button style="background-color: blue; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;" onclick="toggleAnswer()">查看答案和解析</button><div id="answer" style="display:none;">     <p><strong>答案：</strong> B</p>     <p><strong>解析：</strong></p>     <p>首先，ALU 是用来进行算术运算的主要部件，一定与机器字长相同，通用寄存器则可以用来保存中间计算结果，比如乘法器，这也需要与机器字长相同等。</p>     <p>拓展：指令寄存器（Instruction Register，简称IR）是计算机中的一种特殊寄存器，用于存储当前正在执行的指令。所以其位数通常与计算机体系结构和指令集架构有关，与指令长度，寻址方式等密切相关。</p>     <p>浮点寄存器（Floating Point Register）是计算机中用来存储浮点数（floating-point numbers）的寄存器。通常需要更多位数进行拓展以提高计算精度。</p> </div><script> function toggleAnswer() {     var answer = document.getElementById('answer');     if (answer.style.display === 'none') {         answer.style.display = 'block';     } else {         answer.style.display = 'none';     } } </script><p><br></p></li><li><p>下列关于冯·诺依曼结构计算机基本思想的叙述中，错误的是 (C)</p><blockquote><p>C 错误，因为数据不一定都直接在指令中给出。它可以存储在存储器的某个地址中，然后在执行指令时按地址访问这个数据。类似于一种间接访问的形式。</p></blockquote><ul><li>A. 程序的功能都通过中央处理器执行指令实现</li><li>B. 指令和数据都用二进制表示，形式上无差别</li><li>C. 指令按地址访问，数据都在指令中直接给出</li><li>D. 程序执行前，指令和数据需预先存放在存储器中</li></ul><p><br></p></li><li><p>$93 PFLOPS$​​  = (D)</p><blockquote><p>D正确，首先需要知道 P 是多大 注意这里的 P  是用来衡量计算速度的而不是文件大小</p><p>在衡量大小时 $1K = 2^{10}\ \ 1M = 2^{20} \ \ 1G = 2^{30} \ \ 1T = 2^{40} \ \ 1P = 2^{50}$</p><p>在衡量速度时 $1K = 10^3 \ \ 1M = 10^6 \ \ 1G = 10^9 \ \ 1T = 10^{12} \ \ 1P = 10^{15}$</p><p>此题中即 $93\times 10^{15} = 9.3\times 10^{16}$   而 $10^8 = 1亿$</p><p>所以选择D $9.3亿亿$</p></blockquote><ul><li>A. $9.3 \times 10^{13}$</li><li>B. $9.3 \times 10^{15}$</li><li>C. $9.3千万亿$</li><li>D. $9.3亿亿$​</li></ul><p><br></p></li><li><p>下列关于冯·诺依曼计算机中指令和数据存放位置的叙述，正确的是 (D)</p><blockquote><p>D正确，一开始计算机中指令和数据存放在外存中，启动后被装入内存</p></blockquote><ul><li>A. 指令存放在内存中，数据存放在外存中</li><li>B. 指令和数据任何时候都存放在内存中</li><li>C. 指令和数据任何时候都存放在外存中</li><li>D. 程序被启动前指令和数据都存放在外存中，而启动后指令和数据都被装入内存中</li></ul><p><br></p></li><li><p>一般情况下, “裸机”是指 (C)</p><blockquote><p>C正确，裸机是指没有安装任何软件的计算机。计算机由硬件系统和软件系统所组成，没有安装任何软件的计算机称为裸机</p></blockquote><ul><li>A. 单片机</li><li>B. 没有使用过的计算机</li><li>C. 没有安装任何软件的计算机</li><li>D. 只安装操作系统的计算机</li></ul><p><br></p></li><li><p>计算机系统的层次结构，下列五个级别的机器<strong>由下到上</strong>的顺序是 (B)</p><blockquote><p>B正确，计算机系统的层次结构见下图。<img src="/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/image-20240524221824378.png" alt="image-20240524221824378"></p></blockquote><p>I 机器语言机器 II 汇编语言机器 III 高级语言机器 IV 微程序控制机器 V 操作系统机器</p><ul><li>A. I → II → III → IV → V</li><li>B. IV → I → V → II → III</li><li>C. III → II → V → I → IV</li><li>D. V → IV → III → II → I</li></ul><p><br></p></li><li><p>下列关于系统软件叙述中，正确的是（A）</p><blockquote><p>A正确，系统软件和应用软件共同组成了计算机软件系统。直接支持用户使用计算机硬件，是计算机系统中最接近硬件的一层通用软件，一般与具体应用领域无关。</p></blockquote><ul><li>A. 系统软件与具体应用领域无关</li><li>B. 系统软件与具体硬件逻辑功能无关</li><li>C. 系统软件是在应用软件基础上开发的</li><li>D. 系统软件并不具体提供人机界面</li></ul><p><br></p></li><li><p>对于汇编语言程序员来说，以下部件不透明的是 (C)</p><blockquote><p>C正确，首先需要知道透明的意思，在计算机的术语中透明的意思是看不见，而不透明的意思是看得见。透明部分是指那些不属于自己管的那部分，所以看不见。而不透明则需要自己了解和管理。汇编语言程序员需要通过汇编语言来直接读写通用寄存器中的值以进行运算，可以想象以下汇编语言的语法，可以操作通用寄存器中的值来进行运算。同时需要操作中断字寄存器来修改中断的优先级。</p><p>拓展: 关于计算机中透明与不透明的寄存器</p><p><strong>所有用户可见（应用程序员等于用户）：</strong><br>PC(指令计数器)，PSW(标志寄存器)，通用寄存器，ACC(累加器)</p><p><strong>对汇编程序可见（用户可见的汇编程序员也可见）:</strong><br>中断字寄存器（可以修改中断的优先级）</p><p>基址寄存器（基址寻址）</p><p>变址寄存器（变址寻址，如数组的访问需要）</p><p>条件码寄存器</p><p>通用寄存器</p><p><strong>对所有用户不可见:</strong><br>MAR(存储器地址寄存器）</p><p>MDR(存储器数据寄存器)</p><p>IR(指令寄存器)（指令寄存器是从主存中取出来存放指令的寄存器，无法编辑，自然也不可见）</p><p>uIR(微指令寄存器，uMAR，uMDR)</p><p>Cache(高速缓存)</p></blockquote><p>I 指令缓冲器 II 移位器  III 通用寄存器  IV 中断字寄存器  V 乘法器 VI 先行进位链</p><ul><li>A. I、II、和 III </li><li>B. IV、V 和 IV</li><li>C. III 和 IV</li><li>D. I、II、V、VI</li></ul><p><br></p></li><li><p>下列说法中错误的是（D）</p><blockquote><p>D错误，主频是只CPU时钟周期的倒数，而不是机器周期的倒数。</p></blockquote><ul><li>A. 主频为 $1GHz$ 的 CPU 运算性能可能强于主频为 $2GHz$ 的 CPU</li><li>B. 衡量用于科学计算的 CPU 性能的主要指标为 MFLOPS</li><li>C. 字长指计算机能直接处理的二进制信息的位数</li><li>D. 主频是指 CPU 机器周期的倒数</li></ul><p><br></p></li><li><p>计算机的机器字长为 32 位，下列说法中正确的是（A）</p><blockquote><p>A正确，CPU一次能够处理的数据长度称为机器字长。通常机器字长等于通用寄存器的长度。</p><p>通用寄存器是指一种多用途寄存器，可用于保存源操作数和计算得到的中间结果，也可以作为变址寄存器，还可以存放基地址和其他信息等。</p><p>而数据总线的宽度取决于计算机系统中的数据传输需求。它通常指定为每个时钟周期可以传输的数据位数的总数。数据总线的宽度越大，系统在单位时间内能够传输的数据量就越大。与数据传输的数据量有关</p><p>拓展: 三大总线 数据总线，地址总线，控制总线</p><p><strong>数据总线</strong><br>（1） 是CPU与内存或其他器件之间的数据传送的通道。</p><p>（2）数据总线的宽度决定了CPU和外界的数据传送速度。</p><p>（3）每条传输线一次只能传输1位二进制数据。eg: 8根数据线一次可传送一个8位二进制数据(即一个字节)。</p><p>（4）数据总线是数据线数量之和。</p><p><strong>地址总线</strong><br>（1）CPU是通过地址总线来指定存储单元的。</p><p>（2）地址总线决定了cpu所能访问的最大内存空间的大小。eg: 10根地址线能访问的最大的内存为1024位二进制数据（1024个内存单元）</p><p>（3）地址总线是地址线数量之和。</p><p>  (4 )   地址总线是计算机系统中用于传输地址信息的总线，它与存储器和I/O设备进行通信，确定要读取或写入的位置。通过地址总线传输的地址码，计算机系统可以准确定位存储器或I/O设备的位置，实现数据的读写操作。</p><p><strong>控制总线</strong><br>（1）CPU通过控制总线对外部器件进行控制。</p><p>（2）控制总线的宽度决定了CPU对外部器件的控制能力。</p><p>（3）控制总线是控制线数量之和。</p><p><strong>最后总结如下：</strong> </p><p><strong>地址总线的宽度决定CPU的寻址能力；</strong> </p><p><strong>数据总线的宽度决定CPU与其他元器件一次最大传送的数据量；</strong></p><p><strong>控制总线决定CPU对其他元器件的控制能力。</strong></p></blockquote><ul><li>A. 通用寄存器一般为 32 位</li><li>B. 数据总线宽度为 32 位</li><li>C. 支持 64 位操作系统</li><li>D. 以上说法均不正确</li></ul><p><br></p></li><li><p>若一台计算机的机器字长为 4 字节，则表明该机器（C）</p><blockquote><p>C正确，一个字节(1B) = 8b，4 个字节 即 32 位 故选择 C。</p><p>一般来说 32 位运算的最大结果位 $2^{31} - 1$ 因为是使用补码存储的数据，最高位始终为符号位。故少一位，最大能表示的数相当于 31 位二进制数 $2^{31} - 1$。</p></blockquote><ul><li>A. 能处理的数值最大为 4 位十进制数</li><li>B. 能处理的数值最多位 4 位二进制数组成</li><li>C. 在 CPU 中能够作为一个整体处理 32 位二进制代码</li><li>D. 在 CPU 中运算的结果最大位 $2^{32}$ </li></ul><p><br></p></li><li><p>MIPS（每秒百万次指令数）和 MFLOPS （每秒百万次浮点运算数）是衡量 CPU 性能的两个指标其中</p><p><strong>MIPS  适合衡量标量处理器的性能，MFLOPS 适合衡量向量处理器的性能</strong></p><blockquote><p>了解即可</p></blockquote><p><br></p></li><li><p>运算发生溢出的根本原因是（A）</p><blockquote><p>A 正确，无论采用何种机器数，只要运算结果大于数值设备所能表示数的范围，就会产生溢出。</p></blockquote><ul><li>A. 数据的位数有限</li><li>B. 运算中符号位的进位丢弃</li><li>C.  运算中将符号位的借位丢弃</li><li>D. 数据运算中的错误</li></ul><p><br></p></li><li><p>当顶点运算发生溢出时，应（C）</p><blockquote><p>C 正确，A、B、D 选项都是浮点运算时的操作。</p><p>拓展：规格化是指调整浮点数的阶码和尾数，尾数部分用纯小数给出，且小数后第一位的值不为0。</p></blockquote><ul><li>A. 向左规格化</li><li>B. 向右规格化</li><li>C. 发出出错信息</li><li>D. 舍入处理</li></ul><p><br></p></li><li><p>在补码加法运算中,产生溢出的情况是 (C)</p><blockquote><p>C 正确，常用的溢出判断方法主要有三种：采用一个符号位、采用进位位和采用变形补码</p><p>采用一个符号位的溢出条件为：结果的符号位与操作数符号位不同。</p><p>采用进位位的溢出条件为：结果的符号位和最高数位不同时产生进位。</p><p>采用双符号位（变形补码）的溢出条件为：运算结果的两个符号位不同。</p><p><strong>可以这样记，不同即溢出</strong></p></blockquote><p>I 两个操作数的符号位相同,运算时采用单符号位,结果的符号位与操作数相同 </p><p>II 两个操作数的符号位相同,运算时采用单符号位,结果的符号位与操作数不同 </p><p>III 运算时采用单符号位,结果的符号位和最高数位不同时产生进位 </p><p>IV.运算时采用单符号位,结果的符号位和最高数位相同时产生进位 </p><p>V.运算时采用双符号位,运算结果的两个符号位相同</p><p> VI.运算时采用双符号位,运算结果的两个符号位不同</p><ul><li>A. I,III,V</li><li>B. II,IV,VI</li><li>C. II,III,VI</li><li>D. I, II,VI </li></ul><p><br></p></li><li><p>将采用 8 位二进制补码表示的十进制数 -121 拓展成 16 位 二进制补码，结果用十六进制表示为（B）</p><blockquote><p>B 正确，十进制二进制 -121 的 8 位二进制原码表示为 11111001 拓展成16位则为 10000000001111001 </p><p>变为补码为 1111111110000111 变为 16 进制为 FF87H。</p></blockquote><ul><li>A. $0087H$</li><li>B. $FF87H$</li><li>C. $8079H$</li><li>D. $FFF9H$</li></ul><p><br></p></li><li><p>在串行进位的并行加法器中，影响加法器运算速度的关键因素是（C）</p><blockquote><p>C正确，四个选择均会对加法器的运算速度产生影响，但进位传递延迟的影响最为关键。因为必须要等待前一位运算完成才能进行下一位的运算。这样效率会受到很大影响。</p></blockquote><ul><li>A. 门电路的延迟</li><li>B. 元器件速度</li><li>C. 进位传递延迟</li><li>D. 各位加法器的速度的不同</li></ul><p><br></p></li><li><p>下列叙述中，不正确的是 (A)。</p><blockquote><p>A 不正确</p><p>选项A描述的原因是不正确的。串行进位加法器的加法时间长主要是因为它的进位是串行传递的，即每一位的加法结果依赖于前一位的加法和进位结果，因此必须等前一位计算完成后才能进行下一位的计算。这与串行进位加法器的高位电路复杂性无关。</p><p>选项B正确，因为在串行进位加法器中，加法的每一位都需要等前一位完成，因此位数越多，加法所需的时间也就越长。</p><p>选项C描述的是先行进位加法器的特点之一。先行进位加法器设计复杂，尤其是当位数增加时，为了实现快速进位，其电路设计会更加复杂。</p><p>选项D正确描述了串行进位加法器和先行进位加法器加法时间差异的真正原因，即进位的串行传递导致了加法时间的增加。<br>因此，不正确的叙述是A</p></blockquote><ul><li>A.串行进位加法器比先行进位加法器的加法时间长的原因是串行进位加法器高位电路复杂</li><li>B.串行进位加法器位数越多加法时间越长</li><li>C.先行进位加法器位数越高位电路越复杂</li><li>D.串行进位加法器比先行进位加法器的加法时间长的原因是串行进位加法器进位串行传递</li></ul><p><br></p></li><li><p>计算机中的累加器（B）</p><blockquote><p>B 正确，累加器又称为累加寄存器，它实质上是寄存器，没有加法器的功能。</p></blockquote><ul><li>A. 没有加法器功能，也没有寄存器功能</li><li>B. 没有加法器功能，有寄存器功能</li><li>C. 有加法器功能，没有寄存器功能</li><li>D. 有加法器功能，也有寄存器功能</li></ul></li></ol><p><br></p><h1 id="寻址方式期末复习"><a href="#寻址方式期末复习" class="headerlink" title="寻址方式期末复习"></a>寻址方式期末复习</h1><ul><li><p>指令的寻址方式：</p><ul><li><p>形式地址（用 A 表示）</p></li><li><p>有效地址（直接访问主存的地址，EA）</p></li></ul></li><li><p>关系：A 通过寻址方式访问到 EA</p></li><li><p>寻址方式:</p></li></ul><script type="math/tex; mode=display">寻址方式\left.    \begin{cases}        指令寻址 \left.                    \begin{cases}                        顺序寻址(PC + 1) \\                        跳跃寻址(即程序转移指令)                    \end{cases}                \right. \\        数据寻址 (寻找操作数的地址)\\    \end{cases}\right.</script><ul><li><p>寻址方式从快到慢</p><ol><li>立即寻址</li><li><p>寄存器寻址</p></li><li><p>直接寻址 （EA = A）</p></li><li><p>寄存器间接寻址（EA = （Ri) )</p></li><li><p>偏移寻址</p><ul><li><p>变址寻址（EA = （Rx) + A )</p></li><li><p>相对寻址（EA = （PC) + A )</p></li><li><p>基址寻址（EA = （Rb) + A )</p></li></ul></li><li><p>间接寻址  (EA = (A))</p></li></ol></li><li><p>表：基本寻址方式比较</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">寻址方式</th><th>规则</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td style="text-align:left">立即寻址</td><td>操作数 = A</td><td>无需访问主存</td><td>操作数取值范围受限</td></tr><tr><td style="text-align:left">寄存器寻址</td><td>EA = $R_i$</td><td>无需访问主存</td><td>操作空间受限</td></tr><tr><td style="text-align:left">直接寻址</td><td>EA = A</td><td>简单</td><td>寻址空间受限</td></tr><tr><td style="text-align:left">寄存器间接寻址</td><td>EA = ($R_i$)</td><td>寻址空间大</td><td>比寄存器寻址多访问一次主存</td></tr><tr><td style="text-align:left">偏移寻址</td><td>EA = (R) + A</td><td>灵活</td><td>复杂</td></tr><tr><td style="text-align:left">间接寻址</td><td>EA = (A)</td><td>寻址空间大</td><td>需要多次访问主存</td></tr></tbody></table></div><ul><li>堆栈：规则为后进先出 (LIFO) (SP 为堆栈指针，指向栈顶)<ol><li>入栈 (SP) - 1 -&gt; SP ，（A）-&gt; SP</li><li>出栈 ((SP)) -&gt; A, (SP) + 1 -&gt; SP</li></ol></li></ul><h1 id="第二次期末复习"><a href="#第二次期末复习" class="headerlink" title="第二次期末复习"></a>第二次期末复习</h1><ol><li><p>采用 16 位定长指令字格式，操作码位数和寻址方式位数固定，指令系统中有 48 条指令支持，直接，间接，立即，相对，4 种寻址方式，单地址指令中直接寻址方式，可寻址范围是（A）</p><blockquote><p>A 正确，首先这是寻址范围，要满足主存地址不为负数。由题意可知，指令总长为 16 位，有 48 条指令支持，对应的操作码至少需要 6 位，而 4 种寻址方式又需要 2 位，所以形式地址位数为 16 - 6 - 2 = 8，寻址范围为</p><p> $2^8$ = 256，即 0 ~ 255.</p></blockquote><ul><li>A. 0 ~ 255</li><li>B. 0 ~ 1023</li><li>C. -128 ~ 127</li><li>D. -512 ~ 511</li></ul><p><br></p></li><li><p>下列寻址方式种，最适合按下标顺序访问一维数组元素的是（D）</p><blockquote><p>D 正确，在变址操作时，将计算机指令中的地址与变址寄存器中的地址相加，得到有效地址，指令提供数组首地址，由变址寄存器来定位数据中的各元素。所以它最适合按下标顺序访问一维数组元素，选D。</p></blockquote><ul><li>A. 相对寻址</li><li>B. 寄存器寻址</li><li>C. 直接寻址</li><li>D. 变址寻址 </li></ul><p><br></p></li><li><p>某指令功能为 R[r2]&lt;—- R[r1] + M[R[r0]]，其中两个源操作数分别采用寄存器，寄存器间接寻址方式，对于下列给定部件，该指令在取值及执行过程中需要用到的是（B）</p><blockquote><p>B 正确，指令译码器是在取指令的时候对指令进行译码时用到，在该指令取值以及执行过程中不发挥作用，它是在取指令时发挥作用。</p></blockquote><p>I 通用寄存器组 II 算术逻辑单元 III 存储器 IV 指令译码器</p><ul><li>A. I、II、III、IV</li><li>B. I、II、III</li><li>C. II、III、IV</li><li>D. I、III、IV</li></ul><p><br></p></li><li><p>零地址的运算类指令在指令格式中不给出操作数地址，参加运算的两个操作数来自（C）</p><blockquote><p>C 正确，零地址指令的运算属于堆栈的运算指令，参与操作的数据来自堆栈的栈顶和次栈顶。</p><p>拓展：零地址指令分为两种</p><ol><li>不需要操作数，如空操作，停机，关中断等指令</li><li>堆栈计算机，两个操作数隐含存放在栈顶和次栈顶，计算结果压回栈顶。</li></ol></blockquote><ul><li>A. 累加器和寄存器</li><li>B. 累加器和暂存器</li><li>C. 堆栈的栈顶和次栈顶单元</li><li>D. 暂存器和堆栈的栈顶单元</li></ul><p><br></p></li><li><p>下列关于一地址运算类指令的叙述中正确的是（B）</p><blockquote><p>B正确，对于一地址指令来说可能只需要一个操作数，如加 1， 减 1， 取反，求补等。如 OP(A1) -&gt; A1</p><p>也可能需要两个操作数，但其中一个操作数隐含在某个寄存器中（如隐含在ACC中）。</p><p>如 （ACC) OP (A1) -&gt; ACC。ACC中已经提前存好了另一个操作数。</p></blockquote><ul><li>A.  仅有一个操作数，其地址由指令的地址码提供</li><li>B. 可能有一个操作数，也可能有两个操作数</li><li>C. 一定有两个操作数，另一个是隐含的</li><li>D. 指令的地址码字段存放的一定是操作码</li></ul><p><br></p></li><li><p>在通用计算机指令系统的二地址指令中，操作数的物理位置可安排在（D）</p><blockquote><p>D 正确。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">从操作数的物理位置来说，可把二地址指令可归结为三种类型：</span><br><span class="line"></span><br><span class="line">存储器-存储器（ss）型指令：参与操作的数都放在内存里，从内存某</span><br><span class="line">            单元中取操作数，操作结果存放至内存另一单元中。</span><br><span class="line">            因此机器执行这种指令需要多次访问内存。</span><br><span class="line"></span><br><span class="line">寄存器-寄存器（rr）型指令：需要多个通用寄存器或个别专用寄存</span><br><span class="line">             器，从寄存器中取操作数，把操作结果放到另一寄存器中。</span><br><span class="line">             机器执行这种指令的速度很快，不需要访问内存。</span><br><span class="line"></span><br><span class="line">寄存器-存储器（rs）型指令：执行此类指令，既要访问内存单元，</span><br><span class="line">             又要访问寄存器</span><br></pre></td></tr></table></figure></blockquote><ul><li>A. 两个数据寄存器</li><li>B. 一个主存单元和一个数据寄存器</li><li>C. 两个主存单元中</li><li>D. 以上几项均可</li></ul><p><br></p></li><li><p>一个计算机系统采用 32 位单字长指令，地址码为 12 位，如果定义了 250 条二地址指令，那么单地址指令的条数有（D）</p><blockquote><p>D 正确</p><p>指令单字长，则指令长度为32位</p><p>这个指令是从三地址扩展来的吗？ 不是，因为如果是三地址，则至少要 12 x 3 = 36 位 </p><p>二地址要用掉 24 位地址码，操作码还剩下 32 − 24 = 8 位，二地址指令可以有 256 条。</p><p>但是题目说只用了 250 条，也就是可以有 6 条用于扩展</p><p>而单地址指令，意味着地址码只占 12 位，相对于二地址指令，操作码又多出了 12 位 。</p><p>所以单地址指令有：$6\times2^{12} = 24K$</p></blockquote><ul><li>A. 4K</li><li>B. 8K</li><li>C. 16K</li><li>D. 24K</li></ul><p><br></p></li><li><p>某计算机指令字长为 16 位，指令有双操作数、单操作数和无操作数 3 种格式，每个操作数字段均由 6 位二进制表示，该指令系统共有 m 条（m &lt; 16）双操作数指令，并存在无操作数指令。若采用拓展码技术，那么最多还可设计出单操作数指令的条数是（B）</p><blockquote><p>B 正确，16位的指令，操作数为两个的时候(每个占6位)，那么操作码的长度为4位。<br>已知条件为双操作数指令为m条，还剩下2的4次方-m条双操作数指令没有用，可以用来向单操作数指令扩展。<br>因此最多单操作数指令为(2的4次方-m)*2的6次方，<br>如果不考虑有无操作数指令的话，那么就不用留下一个码点从单操作数指令扩展，上面就是最后的答案。但是题 中要求存在无操作数指令，所以还要再减去一个码点，最后答案就了B</p></blockquote><ul><li>A. $2^6$</li><li>B. $(2^4 - m)\times2^6 - 1$</li><li>C. $(2^4 - m)\times 2^6$</li><li>D. $(2^4 - m) \times (2^6 - 1)$ </li></ul><p><br></p></li><li><p>某计算机存储器按字（16）位编址，每取出一条指令后 PC 值加 1， 说明其指令长度是（B）</p><blockquote><p>B 正确，注意这边是按字编址，一个字为 16 位，PC + 1 说明变动了一个字长，一个字长为 2 字节，故选 B</p></blockquote><ul><li>A. 1 个字节</li><li>B. 2 个字节</li><li>C. 3 个字节</li><li>D. 4 个字节</li></ul><p><br></p></li><li><p>一条指令有 128 位，按字节编址，读取这条指令后，PC 的值应自动加（D）</p><blockquote><p>D 正确，注意这里是按字节编址，其与上面一题不同，需要看变动多少个字节，128 / 8 = 16 个字节，故选 D</p></blockquote><ul><li>A. 1</li><li>B. 2</li><li>C. 4</li><li>D. 16</li></ul><p><br></p></li><li><p>某计算机字长为 32 位，存储容量为 4MB，若按字编址，其寻址范围为（A）</p><blockquote><p>A 正确，4MB的B是字节 也就相当于32Mb 这里的b是位</p><p>一个字32位，按字编址意思是每个字(32位)分配一个地址，而要求的寻址范围就是一共能分成多少个地址。</p><p>所以答案是32Mb/32b=1M=2^20</p></blockquote><ul><li>A. $0$ ~  $2^{20} - 1$</li><li>B. $0$ ~ $2^{21} - 1$</li><li>C. $0$ ~ $2^{23} - 1$</li><li>D. $0$ ~ $2^{24} - 1$</li></ul><p><br></p></li><li><p>数据寻址和指令寻址的不同点在于（A）</p><blockquote><p>A 正确，数据寻址寻找的是操作数的地址，指令寻址寻找的是下条指令的地址，它决定于程序转移地址。</p><p>拓展：寻址可以分为指令寻址和数据寻址。寻找下一条将要执行的指令地址称为指令寻址，寻找操作数的地址称为数据寻址。指令寻址比较简单，它又可以细分为顺序寻址和跳跃寻址。而数据寻址方式种类较多，其最终目的都是寻找所需要的操作数。</p><p>数据寻址和指令寻址只与寻找的地址类型有关，而与指令的长度无关。</p></blockquote><ul><li>A. 前者决定操作数地址，后者决定程序转移地址</li><li>B. 前者决定程序转移地址，后者决定操作数地址</li><li>C. 前者是短指令，后者是长指令</li><li>D. 前者是长指令，后者是短指令</li></ul><p><br></p></li><li><p>指令系统种采用不同寻址方式的主要目的是</p><ul><li>缩短指令字长</li><li>扩大寻址范围</li><li>提高编程灵活性</li></ul><p><br></p></li><li><p>根据计算机指令的格式，可知指令执行过程中的操作数可能存放在 （D）</p><blockquote><p>D 正确，在计算机指令的格式中，操作数通常分为立即数（存放在指令本身）、寄存器和存储器中的值。主存是主存储器，属于存储器。故选 D</p><p>拓展：在指令执行过程中，操作数通常会存放在寄存器中。这是由于寄存器具有更快的访问速度和更高的性能，相比于内存存储。在大多数处理器架构中，指令执行时会先将操作数从内存加载到寄存器中进行运算，然后再将结果写回内存。如寄存器寻址。</p></blockquote><p>I 寄存器，II 指令本身，III主存中，IV 控制存储器 </p><ul><li>A.  I, II</li><li>B. II, III</li><li>C. III, IV</li><li>D. I, II, III</li></ul><p><br></p></li><li><p>在寄存器间接寻址方式中，操作数存放在（D）</p><blockquote><p>D 正确，注意这边说是寄存器间接寻址，EA =  R，间接寻址就是说，放在寄存器的不是操作数，而是操作数的地址，操作数放在内存里面。</p></blockquote><ul><li>A. 寄存器</li><li>B. 堆栈</li><li>C. 累加器</li><li>D. 主存单元</li></ul><p><br></p></li><li><p>为了缩短指令中某个地址码的位数，同时使指令的执行时间又相对短，有效的寻址方式是（B）</p><blockquote><p>B 正确，寄存器寻址方式最显著的有点就是：</p><ol><li>由于寄存器数量较少，其地址码比主存单元地址短得多</li><li>从寄存器中存取数据比从主存中快得多</li></ol></blockquote><ul><li>A. 立即寻址</li><li>B. 寄存器寻址</li><li>C. 直接寻址</li><li>D. 寄存器间接寻址</li></ul><p><br></p></li><li><p>指令操作所需的数据不会来自（D）</p><blockquote><p>选择D, 见 14 题</p></blockquote><ul><li>A. 寄存器</li><li>B. 指令本身</li><li>C. 主存</li><li>D. 控制存储器</li></ul><p><br></p></li><li><p>下列有关变址寻址的说法不正确的是 (D)</p><blockquote><p>选择D, 首先变址寻址中利用有效地址都加上了对应寄存器的内容, 扩大了指令的寻址范围。</p><p>D错误是因为变址寄存器的内容是由用户确定，在执行过程中内容可变。</p></blockquote><ul><li>A. 变址寻址扩大了指令的寻址范围</li><li>B. 变址寻址适用于编制循环程序</li><li>C. 变址寻址适合处理数组</li><li>D. 变址寄存器的内容由操作系统确定, 在执行的过程中不可变</li></ul><p><br></p></li><li><p>试比较各种寻址方式的效率，以下结论中不正确的是（B）</p><blockquote><p>选择B，因为堆栈寻址可能是硬堆栈(寄存器)，或软堆栈(内存)，而采用软堆栈比寄存器寻址慢。</p></blockquote><ul><li>A. 立即寻址的效率高于堆栈寻址</li><li>B. 堆栈寻址的效率高于寄存器寻址</li><li>C. 寄存器一次间接寻址的效率高于变址寻址</li><li>D. 变址寻址的效率高于一次间接寻址</li></ul><p><br></p></li><li><p>设相对寻址的转移指令占两字节，第一个字节是操作码，第二个字节是相对位移量(用补码表示)。每当 CPU 从主存中取出第一个字节时，即自动完成 $(PC) + 1 \rightarrow PC$​。若当前 PC 的内容为 2000H，要求转移到 200AH，则该转移指令第二字节的内容应为（B）</p><blockquote><p>B 正确，转移指令是 2 字节，所以当 2000H 转移后变成 2000 + 2 = 2002H。因此 2002H，转到200AH，需要加 08H 即第二个字节相对位移量，故选B。</p></blockquote><ul><li>A. 07H</li><li>B. 08H</li><li>C. 09H</li><li>D. 0AH</li></ul><p><br></p></li><li><p>程序控制类指令的功能是（C）</p><blockquote><p>C 正确，程序控制类指令用于控制程序的执行顺序，并使程序具有测试，分析与判断的能力。</p></blockquote><ul><li>A. 进行主存和 CPU 之间的数据传送</li><li>B. 进行 CPU 和外设之间的数据传送</li><li>C. 改变程序执行的顺序</li><li>D. 控制进栈，出栈操作</li></ul></li></ol><p><br></p><h1 id="第三次-期末复习"><a href="#第三次-期末复习" class="headerlink" title="第三次 期末复习"></a>第三次 期末复习</h1><ol><li><p>某计算机主存空间为 4GB 字长为 32 位，按字节编址采用 32 位定长指字格式。若指令按字边界对齐存放，则程序计数器(PC) 和 指令寄存器(IR)的位数至少分别是 （B）</p><blockquote><p>B 正确，首先 $4GB = 2^{32}B$ ,  字长为 32 位 即 4B，说明一个指令占 4B，而 PC 的作用是定位到指令，而且这边是采用指令按字边界对齐，只需要每次变换找到下一条指令的位置即可，4GB / 4B = 2^30，所以可知 PC 只需要 30 位即可。</p><p>而指令寄存器(IR) 存放的是正在执行的指令，由于每个指令都是 32 位，所以毫无疑问，IR 也是 32 位，故选B。</p></blockquote><ul><li>A. 30, 30</li><li>B. 30, 32</li><li>C. 32, 30</li><li>D. 32, 32</li></ul><p><br></p></li><li><p>下列寄存器中，汇编语言程序员可见的是 （B）</p><blockquote><p>B 正确，见第二章第八题，程序员可以通过制定待执行指令的地址来设置 PC 的值。</p></blockquote><ul><li>A. 存储器地址寄存器(MAR)</li><li>B. 程序计数器(PC)</li><li>C. 存储器数据寄存器(MDR)</li><li>D. 指令寄存器(IR)</li></ul><p><br></p></li><li><p>冯·诺依曼计算机中指令和数据均以二进制形式存放在存储器中，CPU 区分它们的依据是（C）</p><blockquote><p>C 正确，CPU 可以根据指令周期的不同阶段来区分是指令还是数据，通常在取指令阶段取出的是指令，其他阶段(分析取数阶段，执行阶段)取出的是数据。</p></blockquote><ul><li>A. 指令操作码的译码结果</li><li>B. 指令和数据的寻址方式</li><li>C. 指令周期的不同阶段</li><li>D. 指令和数据所在的存储单元</li></ul><p><br></p></li><li><p>下列关于程序计数器(PC)的叙述中，错误的是（C）</p><blockquote><p>C 错误，当执行到转移指令时，对于无条件转移或调用、返回等指令，则PC的值直接修改为目标指令地址；对于条件转移(分支)指令，则必须根据前面指令或当前指令执行的结果标志，确定是把转移目标地址还是把下条指令地址送到PC。这边说总是，则不对。</p></blockquote><ul><li>A. PC 中总是存指令地址</li><li>B. PC 的值由 CPU 在执行指令过程中进行修改</li><li>C. 转移指令时，PC 的值总是修改为转移目标指令的地址</li><li>D. PC 的位数一般和存储器地址寄存器(MAR)的位数一样</li></ul><p><br></p></li><li><p>在一次无条件跳转指令的指令周期内，PC 的值被修改的次数是（B）</p><blockquote><p>B 正确，取指周期结束后，PC 的值 + 1；执行周期中，PC 值修改为要跳转的地址，故 PC 被修改两次。</p></blockquote><ul><li>A. 1</li><li>B. 2</li><li>C. 3</li><li>D. 无法确定</li></ul><p><br></p></li><li><p>数据寄存器中既能存放源操作数，又能存放结果的是 （C）</p><blockquote><p>C 正确，累加器内容可以作为源操作数，也可以暂时存放 ALU 运算的结果信息。</p></blockquote><ul><li>A. 锁存器</li><li>B. 堆栈</li><li>C. 累加器</li><li>D. 触发器</li></ul><p><br></p></li><li><p>指令译码器是对 （B）进行译码的</p><blockquote><p>B 正确，指令的操作码字段表示该指令进行什么性质的操作，而指令译码器就是来翻译操作码，实现相关操作。</p><p>指令由操作码和地址码组成。</p></blockquote><ul><li>A. 整条指令</li><li>B. 指令的操作码字段</li><li>C. 指令的地址</li><li>D. 指令的操作数字段</li></ul><p><br></p></li><li><blockquote><p>时钟周期：计算机中最小的时间单位，等于 CPU 主频的倒数。一个时钟周期内，CPU 仅完成一个最基本的动作</p><p>机器周期：机器周期又叫CPU周期。由若干时钟周期可以组成一个机器周期，机器周期就是要完成一个比较完整的子工作。计算机中为了方便管理，常把一条指令 的执行过程划分为若干个阶段（如取指、间址、执行、中断等）每一阶段完成一个基本操作。注意：每一个基本操作都是由若干CPU最基本的动作组成。这个基本操作所需要的时间称为机器周期，则机器周期由若干个时钟周期组成。</p><p>指令周期：从取指开始到执行完成该指令所需要的全部时间。指令周期包含若干机器周期。</p><p><strong>指令周期&gt;机器周期&gt;时钟周期</strong></p></blockquote><p><br></p></li><li><p>在计算机体系结构中，CPU内部包括程序计数器PC、存储器数据寄存器MDR、指令寄存器IR和存储器地址寄存器MAR等。若CPU要执行的指令为:MOV R0，#100(即将数值100传送到寄存器R0中)，则CPU首先要完成的操作是 （C）</p><blockquote><p>C正确，无论运行什么类型的指令，CPU首先需要取指令，取指令阶段的第一个操作就是将指令地址(程序计数器PC中的内容)送往存储器地址寄存器。 取指周期完成的微操作序列是公共的操作，与具体指令无关，取指公共操作如下: (1) 将程序计数器PC中的内容送至存储器地址寄存器MAR，记作(PC)→MAR; (2) 向主存发读命令，记作Read; (3)从主存中取出的指令送到存储器数据寄存器MDR，记作M(MAR)→MDR; (4)将MDR的内容送至指令寄存器IR中，记作(MDR)→IR; (5)将PC的内容递增，为取下一条指<br>令做好准备，记作(PC)+1→PC。题于中虽然给出了一条具体的指令“MOV R0，#100”，实际上CPU首先要完成的操作是取指令，与具体指令是没有关系的。</p></blockquote><ul><li>A. 100→R0</li><li>B. 100→MDR</li><li>C. PC→MAR</li><li>D. PC→IR</li></ul><p><br></p></li><li><p>取指令操作 (C )</p><blockquote><p>这题不确定答案，知道答案可以和我联系。</p></blockquote><ul><li>A. 受上一条指令操作码的控制</li><li>B. 受当前指令操作码的控制</li><li>C. 不受指令操作码的控制</li><li>D. 受运算器中的条件码(或标志码)的控制</li></ul><p><br></p></li><li><p>有关指令周期叙述，错误的是（B）</p><blockquote><p>B 错误，很明显乘法比加法复杂，指令周期肯定更长一些。这题主要学习其他正确的选项。</p></blockquote><ul><li>A. 指令周期的第一个阶段是取指令阶段</li><li>B. 乘法指令和加法指令的指令周期一样长</li><li>C. 一个指令周期由若干个机器周期或时钟周期组成</li><li>D. 单周期处理器的指令周期就是一个时钟周期。</li></ul><p><br></p></li><li><p>在计算机中，存放微指令的控制存储器隶属于（D）</p><blockquote><p>C正确，CPU内部有一个控制存储器,里面存放着各种程序指令对应的微程序段。当CPU执行一句程序指令时,会从控制存储器里取一段与该程序指令对应的微程序解释执行,从而完成该程序语句的功能。CPU = 控制器 + 运算器 + (Cache)</p></blockquote><ul><li>A. 外存</li><li>B. 高速缓存</li><li>C. 内存</li><li>D. CPU</li></ul><p><br></p></li><li><p>在微程序控制中，操作控制信号将编成（A) 形式</p><blockquote><p>A 正确，微程序设计的概念是将一条机器指令编写成一个微程序,每一个微程序包含若干条微指令,每一条微指令对应一个或几个微操作命令。然后把这些微程序存放到一个控制存储器中,用寻找用户程序机器指令的方法来寻找每个微程序中的微命令</p></blockquote><ul><li>A. 微指令</li><li>B. 微地址</li><li>C. 操作码</li><li>D. 程序</li></ul><p><br></p></li><li><p>下列说法中正确的是（D）</p><blockquote><p>D 正确，一条微指令放在控制存储器的一个单元中。</p><p>A 错误，硬布线控制器采用硬件电路，速度快，但设计难度复杂，成本高。而微程序控制器速度慢，但灵活性高；</p><p>B 错误，控制存储器采用的是 ROM</p><p>C 错误，微指令计数器决定微指令执行顺序，指令执行顺序由 PC 决定。</p></blockquote><ul><li>A. 采用微程序控制器是为了提高速度</li><li>B. 控制存储器由高速 RAM 电路组成</li><li>C. 微指令计数器决定指令执行顺序</li><li>D. 一条微指令放在控制存储器的一个单元中。</li></ul><p><br></p></li><li><p>以下关于CPU的叙述中，错误的是 (B)</p><blockquote><p>B 错误，CPU的功能主要包括程序控制、操作控制、时间控制和数据处理。CPU主要由运算器、控制器、寄存器组和内部总线等部件组成。CPU产生每条指令的操作信号并将操作信号送往相应的部件进行控制，因此说法A正确。</p><p> CPU中的控制器用于控制整个CPU的工作，它决定了计算机运行过程中的自动化，因此说法C正确。 </p><p>程序计数器PC具有寄存信息和计数两种功能，又称为指令计数器。程序的执行分为两种情况，顺序执行和转移执行。在程序执行前，将程序的起始地址送入PC该地址在程序加载到内存时确定，执行指令时，CPU将自动修改PC的内容，当指令按照顺序执行时，PC加1。如果是转移指令，后继指令的地址根据当前指令的地址加上一个向前或向后转移的位移量得到。因此PC没有临时存储算术/逻辑运算结果的功能。因此说法B错误。</p><p>CPU中的控制器包括指令寄存器(IR)、程序计数器(PC)、地址寄存器(AR)和指令译码器(ID)。因此说法D正确。 综上所述，答案为B。</p></blockquote><ul><li>A. CPU产生每条指令的操作信号并将操作信号送往相应的部件进行控制</li><li>B. 程序计数器PC除了存放指令地址，也可以临时存储算术/逻辑运算结果</li><li>C. CPU中的控制器决定计算机运行过程的自动化</li><li>D. 指令译码器是CPU控制器中的部件</li></ul><p><br></p></li><li><p>在微程序控制器中,机器指令与微指令的关系是 （B）</p><blockquote><p>B 正确，一条机器指令的功能通常用许多条微指令组成的序列来实现，这个微指令序列称为微程序。</p></blockquote><ul><li>A. 每一条机器指令由一条微指令来执行</li><li>B. 一条机器指令由一段用微指令编成的微程序来解释执行</li><li>C. 一段机器指令组成的程序可由一个微程序来执行</li><li>D. 每一条微指令由一条机器指令来解释执行</li></ul><p><br></p></li><li><p>在微程序控制的计算机中，若要修改指令系统，只要（D）</p><blockquote><p>D 正确，在微程序控制的计算机中，若要修改指令系统，只需修改相应指令的微程序即可。这些微程序都存放在控制存储器中，所以只需改变控制存储器的内容。故选择 D</p><p>拓展：微程序控制器的设计思想和组合逻辑控制器的设计思想截然不同。它具有设计规整、调试维修以及更改、扩充指令方便的优点，易于实现自动化设计，已成为当前控制器的主流。但是，由于它增加了一级控切制存储器，所以指令执行速度比组合逻辑控制器慢。</p></blockquote><ul><li>A. 改变时序控制方式</li><li>B. 改变微指令格式</li><li>C. 增加微指令个数</li><li>D. 改变控制存储器的内容</li></ul><p><br></p></li><li><p>下列关于并行微程序控制器的说法中,正确的是 (A)。</p><blockquote><p>A 正确，并行微程序控制器中，在执行现行微指令的同时，取下一条微指令，故选择 A</p></blockquote><ul><li>A. 现行微指令的执行与取下一条微指令的操作并行</li><li>B. 现行微指令的执行与取下一条微指令的操作串行</li><li>C. 两条或更多微指令的执行在时间上并行</li><li>D. 两条或更多微指令的取微指令操作在时间上并行</li></ul><p><br></p></li><li><p>设指令由取指，分析，执行 3 个子部件完成，并且每个子部件的时间均为 $\Delta t$ ，若采用常规标量单流水线处理机 (即处理机的度为1)，连续执行 12 条指令，共需 (B)</p><blockquote><p>B 正确，下图示意的是 16 条指令的流水线图，可以从中找到 12 处为 $14\Delta t$ </p><p><img src="/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/image-20240605213243288.png" alt="image-20240605213243288"></p><p>拓展： 若采用度为 4 的处理机，执行 16 条指令，需要时间为 $6\Delta t$ ，下图示意</p><p><img src="/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/image-20240605213547459.png" alt="image-20240605213547459"></p></blockquote><ul><li>A. $12 \Delta t$ </li><li>B. $14\Delta t$</li><li>C. $16\Delta t$</li><li>D. $18\Delta t$​</li></ul><p><br></p></li><li><p>流水计算机中，下列语句发生的数据相关类型是（A）</p><p>ADD, R1, R2, R3，即 (R2) + (R3) $\rightarrow$ R1</p><p>ADD, R4, R1, R5，即 (R1) + (R5) $\rightarrow $​​​ R4</p><blockquote><p>A 正确，在这两条指令中，都对 R1 进行操作，前面对 R1 写操作，后面对 R1 读操作，因此发生的是写后读。选择 A</p></blockquote><ul><li>A. 写后读</li><li>B. 读后写</li><li>C. 写后写</li><li>D. 读后读</li></ul><p><br></p></li><li><p>下列几项中,流水线相关包括 (C)。</p><p>I.结构相关 II.数据相关 III.指令相关 IV.控制相关</p><blockquote><p>C正确，流水线相关包括:结构相关、数据相关和控制相关。</p><p>其中,结构相关是由于不同指令欲同时使用一个部件而造成的</p><p>数据相关是指后面指令欲使用前面指令的结果时该结果还没有产生</p><p>控制相关是指指令执行的顺序发生改变而引起的流水线停顿以各类转移指令、分支指令以及中断或异常的出现都会引起控制相关</p></blockquote><ul><li>A. I, II, III, IV</li><li>B. I, II, III</li><li>C. I, II, IV</li><li>D. I, III, IV</li></ul><p><br></p></li><li><p>下列关于动态流水线和超标量处理器的说法中,错误的是(D)。</p><blockquote><p>D 错误，超标量技术指的是采用更多指令执行部件来构成多条流水线的技术，而不是采用更多流水段。</p></blockquote><ul><li>A. 超标量处理器中一定有多个不同的指令执行单元</li><li>B. 动态流水线执行指令的顺序不一定是输入指令的顺序</li><li>C. 超标量处理器不一定都采用动态流水线</li><li>D. 超标量技术是指采用更多流水段个数的流水线技术</li></ul><p><br></p></li></ol><h1 id="第四次-期末复习"><a href="#第四次-期末复习" class="headerlink" title="第四次 期末复习"></a>第四次 期末复习</h1><ol><li><p>一次总线事务中，主设备只需给出一个首地址，从设备就能从首地址开始的若干连续单元读出或写入多个数据。这种总线事务方式称为（C）</p><blockquote><p>C 正确</p><p>猝发（突发）传输是在一个总线周期中，可以传输多个存储地址连续的数据，即一次传输一个地址和一批地址连续的数据，</p><p>并行传输是在传输中有多个数据位同时在设备之间进行的传输，</p><p>串行传输是指数据的二进制代码在一条物理信道上以位为单位按时间顺序逐位传输的方式，</p><p>同步传输是指传输过程由统一的时钟控制。</p><p>故选 C </p></blockquote><ul><li>A. 并行传输</li><li>B. 串行传输</li><li>C. 突发传输</li><li>D. 同步传输</li></ul><p><br></p></li><li><p>下列选项中，可提高同步总线数据传输率的是（B）</p><p>I. 增加总线宽度 II. 提高总线工作效率 III. 支持突发传输 IV. 采用地址/数据线复用</p><blockquote><p>B正确，</p><p>I II 都很明显，肯定增加的 </p><p> III 突发传输一般表示的是两个设备之间进行数据传送的一种模式，也可将其称为突发模式下的数据传输。而突发（Burst）是指在同一行中相邻的存储单元连续进行数据传输的方式，连续传输的周期数就是突发长度（Burst Lengths，简称BL）。在突发传输模式下，多个数据单元当做一个单元（相当一个数据块）来传送，从而提高了传输效率。 </p><p> IV 地址数据线复用并非提高而是降低，毕竟同一时间你还得传地址过去，等价的数据传输效率就低了。只是减少了成本。</p></blockquote><ul><li>A. I、II</li><li>B. I、II、III</li><li>C. II、III</li><li>D. I、II、III、和 IV </li></ul><p><br></p></li><li><p>下列关于总线设计的叙述中，错误的是 (A)</p><blockquote><p>A 错误，</p><p>并行总线传输通常比串行总线传输速度快，但这不是绝对的。在实际时钟频率比较低的情况下，并行总线因为可以同时传输若干比特，速率确实比串行总线快。但是，随着技术的发展，时钟频率越来越高，并行导线之间的相互干扰越来越严重，当时钟频率提高到一定程度时，传输的数据已经无法恢复。而串行总线因为导线少，线间干扰容易控制，反而可以通过不断提高时钟频率来提高传输速率，A错误。</p><p>总线复用是指一种信号线在不同的时间传输不同的信息。可以使用较少的线路传输更多的信息，从而节省了空间和成本。故B正确。</p><p>突发（猝发）传输是在一个总线周期中，可以传输多个存储地址连续的数据，即一次传输一个地址和一批地址连续的数据，C正确。</p><p>分离事务通信即总线复用的一种，相比单一的传输线路可以提高总线的利用率，D正确。</p></blockquote><ul><li>A .并行总线传输比串行总线传输速度快</li><li>B.采用信号线复用技术可以减少信号线数量</li><li>C.采用突发传输方式可提高总线数据传输速率</li><li>D.采用分离事务通信方式可提高总线利用率</li></ul><p><br></p></li><li><p>下列选项中的英文缩写均为总线标准的是 ( D)</p><blockquote><p>D 正确，</p><p>A. PCI、<strong>CRT</strong>、USB、EISA      </p><p>B. ISA、<strong>CPI</strong>、VESA、EISA    </p><p>C.  ISA、<strong>SCSI、RAM、MIPS</strong> </p><p>标黑的是不对的</p><p>目前典型的总线标准有： </p><p>ISA、EISA、VESA、PCI、PCI-Express、AGP、USB、RS-232C等。  </p><p>微型机总线标准有下面几种：</p><p>ISA总线、EISA总线、MCA总线、VESA局部总线、PCI总线、AGP总线、USB总线、Alpha EV6总线、PCI局部总线、NGIO总线、IEEE1394、Future I/O总线</p></blockquote><ul><li><p>A. PCI, CRT, USB, EISA</p></li><li><p>B. ISA, CPI, VESA, EISA</p></li><li><p>C. ISA, SCSI, RAM, MIPS</p></li><li><p>D. ISA, EISA, PCI, PCI-Express</p></li></ul><p><br></p></li><li><p>下列关于 USB 总线特性的描述中，错误的是 (D)</p><blockquote><p>D 错误，USB的特点有：（1）即插即用 （2）热插拔 （3）很强的连接能力，采用菊花链形式将总舵外设备连接起来 （4）有很好的扩展性，一个USB控制可扩充高达127个外部USB设备（ 5）告诉传输 速率可达480Mb/s （6）串行总线，一次只能传输一位数据</p></blockquote><ul><li>A. 实现外设的即插即用和热插拔</li><li>B. 可通过级联方式连接多台外设</li><li>C. 是一种通信总线，可连接不同外设</li><li>D. 同时可传输 2 位数据，数据传输率高</li></ul><p><br></p></li><li><p>系统总线中，划分数据线，地址线和控制线的根据是（C）</p><blockquote><p>C 正确，系统总线按传送信息的不同划分位地址总线，数据总线和控制总线。</p></blockquote><ul><li><p>A. 总线所处的位置</p></li><li><p>B. 总线的传输方向</p></li><li><p>C. 总线的传输内容</p></li><li><p>D. 总线的控制方式</p></li></ul><p><br></p></li><li><p>系统总线中地址线的作用是(C)</p><blockquote><p>C正确，地址线作用即为用于指定主存单元和I/O设备接口电路的地址</p></blockquote><ul><li>A. 用于选择主存单元地址</li><li>B.用于选择进行信息传输的设备</li><li>C.用于指定主存单元和I/O设备接口电路的地址</li><li>D.用于传送主存物理地址和逻辑地址</li></ul><p><br></p></li><li><p>在系统总线中，地址总线的位数（B）</p><blockquote><p>B 正确，</p><p>地址总线的位数与存储单元个数有关，地址总线的位数越长，可访问的存储单元个数就越多。</p><p>系统总线按传送信息的不同可以细分为:地址总线、数据总线和控制总线</p><p>地址总线由单方向的多根信号线组成，用于CPU向主存、外设传输地址信息</p><p>数据总线由双方向的多根信号线组成，CPU可以沿这些线从主存或外设读入数据，电可以沿这些线向主存或外设送出数据;</p><p>控制总线上传输的是控制信息，包括CPU送出的控制命令和主存(或外设)返回CPU的反馈信号。</p><p>地址总线宽度决定了CPU可以访问的最大的物理地址空间，简单地说就是CPU到底能够使用多大容量的主存。</p><p>例如，32位地址线，可寻址的最大容量为2^32=4096MB(4GB)。</p></blockquote><ul><li>A. 与机器字长有关</li><li>B. 与存储单元个数有关</li><li>C. 与存储字长有关</li><li>D. 与存储器带宽有关</li></ul><p><br></p></li><li><p>挂接在总线上的多个部件 (B)</p><blockquote><p>B 正确，总线是一组能为多个部件分时共享的信息传送线，用来连接多个部件并为之提供信息交换通路。所谓共享，指连接到总线上的所有部件都可通过它传递信息；分时性指某一时刻只允许一个部件将数据发送到总线上。因此，共享是通过分时实现的。</p><p>可以这么理解：可以一个人讲话，很多人听，但如果多个人同时说话就会很混乱，所以必须分时发送数据即，每次一个人说话传递信息，同时从总线接受数据，相当于听一个总览者讲话，下面人都可以同时听到。</p></blockquote><ul><li>A、只能分时向总线发送数据，并只能分时从总线接收数据</li><li>B、只能分时向总线发送数据，但可同时从总线接收数据</li><li>C、可同时向总线发送数据，并同时从总线接收数据</li><li>D、可同时向总线发送数据，但只能分时从总线接收</li></ul><p><br></p></li><li><p>间接寻址第一次访问内存所得到的是操作数的有效地址，该地址经系统总线的 (A) 传送到 CPU。</p><blockquote><p>A 正确，注意是第一次访问内存，由于是访问存储器得到的内容．所以是存储单元存放的数据，应该由数据总线传送给CPU。CPU经寻址方式判断后，再通过地址总线送给存储器，为读取操作数做准备。</p></blockquote><ul><li><p>A. 数据总线</p></li><li><p>B. 地址总线</p></li><li><p>C. 控制总线</p></li><li><p>D. 用户程序</p></li></ul><p><br></p></li><li><p>在单机系统中，三总线结构计算机的总线系统组成是（C）</p><blockquote><p>C 正确，在单机系统中,三总线结构的计算机的总线系统由系统总线、内存总线、I/O总线组成。</p><p>其中,系统总线用于CPU和内存之间传送地址、数据和控制信息;</p><p>内存总线使内存和高速外设之间能够直接传送数据</p><p>I/O总线提供CPU和各类外设之间的通信</p><p>拓展：三总线结构也可以由内存总线，I / O总线 和 DMA（<strong>直接内存访问</strong>（DMA，Direct Memory Access） 总线组成</p><p><img src="/2024/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/image-20240608191723113.png" alt="image-20240608191723113"></p></blockquote><ul><li>A. 片内总线，系统总线和通信总线</li><li>B. 数据总线，地址总线和控制总线</li><li>C. 系统总线，主存总线和 I / O 总线</li><li>D. ISA总线，VESA 总线 和 PCI 总线</li></ul><p><br></p></li><li><p>微机中控制总线上完整传输的信号有（B）</p><p>I 存储器和 I / O 设备的地址码 ; II 所有存储器和 I / O 设备的时序信号和控制信号 ; III 来自 I / O 设备和存储器的响应信号</p><blockquote><p>B 正确，CPU 的控制总线提供的信号包括时序信号，I / O 设备和存储器的响应信号等。 I 很明显是由地址总线传送的</p></blockquote><ul><li>A. I</li><li>B. II, III</li><li>C. II</li><li>D. I, II, III</li></ul><p><br></p></li><li><p>总线的从设备指的是（B）</p><blockquote><p>B 正确，总线设备可分为主设备和从设备，掌握总线控制权的设备是总线主设备，而被主设备访问的设备是从设备</p></blockquote><ul><li>A. 申请作为从设备的设备</li><li>B. 被主设备访问的设备</li><li>C. 掌握总线控制权的设备</li><li>D. 总线源设备</li></ul><p><br></p></li><li><p>在集中式总线控制中，（C）方式响应时间最快</p><blockquote><p>C 正确，独立请求方式的响应时间最快，然而这是以增加控制线数和硬件电路为代价的。</p></blockquote><ul><li>A. 链式查询</li><li>B. 计数器定时查询</li><li>C. 独立请求</li><li>D. 不能确定哪一种</li></ul><p><br></p></li><li><p>在链式查询方式下，若有 n 个设备，则 (B)</p><blockquote><p>B 正确，链式查询方式采用菊花链的方式连接所有具有总线使用能力的器件，各设备分别共有一根总线信号。</p></blockquote><ul><li><p>A. 有 n 条总线请求</p></li><li><p>B. 共有一条总线请求</p></li><li><p>C. 有 n - 1 条总线请求信号</p></li><li><p>D. 无法确定</p></li></ul><p><br></p></li><li><p>为了对 n 个设备使用总线的请求进行仲裁,  在独立请求方式中需要使用的控制线数量为 (D)</p><blockquote><p>D 正确，</p><p>对于n个设备而言,链式查询方式需要3条控制线;</p><p>计数器定时查询方式需要 $2 + \lfloor log_2n \rfloor$] 条控制线;</p><p>而独立请求方式需要 2n+1 条控制线,包括 n 条总线请求控制线、n 条总线批准控制线和1条总线忙控制线。</p></blockquote><ul><li>A. n</li><li>B. 3</li><li>C. $2 + \lfloor log_2n \rfloor$</li><li>D. 2n + 1</li></ul><p><br></p></li><li><p>下列计算机总线属于串行总线的是（B）</p><blockquote><p>B 正确，</p><p>1394是高性能的串行总线。</p><p>IEEE-1394构建在菊花链或树状的拓扑结构上的，最新的高性能外部总线设计的趋势是使用<strong>串行结构</strong>，这样可以通过一根导线一次发送一位数据，而无须担心数据的到达时间，如IEEE-1394端口(使用高速串行技术)<br>选项A、C、D均属于并行总线。</p></blockquote><ul><li>A. PCI</li><li>B. 1394</li><li>C. EISA</li><li>D. ISA</li></ul><p><br></p></li><li><p>异步传输方式是指没有统一的时钟,也没有固定的时间间隔,完全依靠传送双方相互制约的“握手信号”来实<br>现定时控制。在下列各种情况中,最应采用异步传输方式的是(A)</p><blockquote><p>A 正确，</p><p>I/0接口和打印机之间的速度差异较大,应采用异步传输方式来提高效率。异步定时方式能保证两个工作<br>速度相差很大的部件或设备之间可靠地进行信息交换</p></blockquote><ul><li>A. I/O接口与打印机交换信息</li><li>B. CPU与主存交换信息</li><li>C. CPU和总线交换信息</li><li>D. CPU内部的各个部件</li></ul><p><br></p></li><li><p>下列选择中，不属于 I/O 接口的是（A）</p><blockquote><p>A 正确，</p><p>A 不属于 I/O 接口。磁盘驱动器是用于读写磁盘上存储数据的设备。虽然它与I/O操作相关，但磁盘驱动器本身是存储设备。</p><p>B 属于 I/O 接口。打印机适配器是一种用于连接计算机和打印机之间的接口。它负责转换计算机系统中的数据格式和打印机所需的格式，并管理数据的传输和控制打印机操作。</p><p>C 属于 I/O 接口。网络控制器是用于连接计算机系统与计算机网络之间的接口。它负责协调和管理数据在计算机和网络之间的传输，执行网络协议和管理网络连接。</p><p>D 属于 I/O 接口。可编程中断控制器是计算机系统中的一种设备，用于管理和处理系统中的中断信号。它负责识别中断来源、优先级和中断处理程序的分发。</p></blockquote><ul><li>A. 磁盘驱动器</li><li>B. 打印机适配器</li><li>C. 网络控制器</li><li>D. 可编程中断控制器</li></ul><p><br></p></li><li><p>下列选择中，在 I/O 总线的数据线上传输的信息包括（D）</p><p>I. I/O 接口中的命令字 II. I/O 接口中的状态字 III. 中断类型号</p><blockquote><p>D 正确，在 I/O 总线的数据线上传输的信息包括 I/O 接口中的命令字，状态字以及真正的数据，而中断类型号也是通过数据线传输的。</p></blockquote><ul><li>A. I, II</li><li>B. I, III</li><li>C. II, III</li><li>D. I, II, III</li></ul><p><br></p></li><li><p>下列有关I/0接口的叙述中错误的是 (D)</p><blockquote><p>D错误，采用统一编码方式，存储器和 I/O 端口共用统一的地址空间，不需要专用的 I/O 指令，任何对存储器数据进行操作的指令都可用于 I/O 端口的数据操作。</p></blockquote><ul><li>A. 状态端口和控制端口可以合用同一寄存器中</li><li>B. I/O接口中CPU可访问寄存器，称为I/0端口</li><li>C. 采用独立编址方式时，I/O端口地址和主存地址可能相同</li><li>D. 采用统一编址方式时，CPU不能用访存指令访问I/O端口</li></ul><p><br></p></li><li><p>I/O 指令实现的数据传送通常发生在（D）</p><blockquote><p>D 正确，</p><p>A.IO设备和I/0端口之间。这不是通过I/0指令直接实现的，而是通过系统的其他部分(例如DMA或中断)。<br>B. 通用寄存器和I/0设备之间。数据不会直接从通用寄存器传输到I/0设备，它们需要一个中间介质，通常是I/0端口.<br>C.I/O端口和I/0端口之间。这不是常规的操作，两个I/0端口之间通常不会直接传输数据。<br>D.通用寄存器和I/0端口之间。这是正确的选择。当CPU需要与外部设备进行通信时，它通常将数据从通用寄存器写入I/0端口，或从I/0端口读取数据到通用寄存器。<br>答案是 D。数据传送通常发生在通用寄存器和I/0端口之间。</p></blockquote><ul><li>A. I/O 设备和 I/O 端口之间</li><li>B. 通用寄存器和 I/O 设备之间</li><li>C. I/O 端口和I/O 端口之间</li><li>D. 通用寄存器和I/O 端口之间</li></ul><p><br></p></li><li><p>下列事件中，属于外部中断事件的是（C）</p><p>I. 访存时缺页 II. 定时器到时 III. 网络数据包到达</p><blockquote><p>C 正确，访存时缺页属于内部中断。</p></blockquote><ul><li>A. I, II</li><li>B. I, III</li><li>C. II, III</li><li>D. I, II, III</li></ul><p><br></p></li><li><p>在采用中断I/0方式控制打印输出的情况下, CPU和打印控制接口中的 I/O 端口之间交换的信息不可能是（B）</p><blockquote><p>选择 B，</p><p>I/0 接口的功能包括:①选址功能;②传送命令功能;③传送数据功能;④反映I/0 设备工作状态功能。A项为数据，C项为设备状态，D项为命令。B项，主存地址在中断方式控制下是不需要的，因此，它不可能是 CPU 和打印控制接口中的I/0 端口之间交换的信息。</p></blockquote><ul><li>A.打印字符</li><li>B.主存地址</li><li>C.设备状态</li><li>D.控制命令</li></ul><p><br></p></li><li><p>下列选四项中,能引起外部中断的事件是(A)。</p><blockquote><p>A 正确，浮点数下溢一般做“机器零”处理,不引起中断;除数为0、访存缺页会引出内部中断;只有键盘输入<br>能引起外部中断</p></blockquote><ul><li>A.键盘输入</li><li>B. 除数为0</li><li>C.浮点运算下溢</li><li>D. 访存缺页</li></ul><p><br></p></li><li><p>响应外部中断的过程中,中断隐指令完成的操作,除保护断点外,还包括 (B)<br>I. 关中断 II. 保存通用寄存器的内容 III. 形成中断服务程序入口地址并送PC</p><blockquote><p>B 正确，中断隐指令完成以下三大任务: 程序断点进栈、关中断、向量地址-PC</p></blockquote><ul><li>A. 仅I、II</li><li>B. 仅I、III</li><li>C. 仅II、III</li><li>D. I、II、III</li></ul><p><br></p></li><li><p>单级中断系统中,中断服务程序内的执行顺序是（A）</p><p>I.保护现场 II. 开中断 III.关中断 IV.保存断点 V.中断事件处理 VI.恢复现场 VII.中断返回</p><blockquote><p>A 正确，在单级中断系统中，一旦响应了一个中断，可以不必使用关中断的措施来防止再来一个新的<br>中断干扰已经开始的中断保存现场和恢复现场的工作。响应与处理中断的几项操作是有严格顺序关系的，<br>不能颠倒。</p></blockquote><ul><li>A. I→&gt;V→&gt;VI→II-&gt;VII</li><li>B. III→I→V→VII</li><li>C. III→IV→V →VI→VII</li><li>D. IV→I→V→VI→VII</li></ul><p><br></p></li><li><p>下列关于外部I/O中断的叙述中,正确的是(C)。</p><blockquote><p>C 正确，</p><p>A 项，中断控制器按中断请求的重要性和紧迫程度进行中断优先级排队，与先后次序无关。</p><p>B项，CPU 响应中断时，通过执行保存寄存器的数值(保护现场)完成通用寄存器的保护。</p><p>D项，有中断请求时，需要进行进程优先级的比较，CPU 不是立即暂停当前指令执行，转去执行中断服务程序.</p></blockquote><ul><li>A. 中断控制器按所接受中断请求的先后次序进行中断优先级排队</li><li>B. CPU响应中断时,通过执行中断隐指令完成通用寄存器的保护</li><li>C. CPU只有在处于中断允许状态下时,才能响应外部设备的中断请求</li><li>D. 有中断请求时,CPU立即暂停当前指令执行,转去执行中断服务程序</li></ul><p><br></p></li><li><p>系统将数据从磁盘读到内存的过程包括以下操作</p><p>① DMA控制器发出中断请求</p><p>② 初始化DMA控制器并启动磁盘</p><p>③ 从磁盘传输一块数据到内存缓冲区</p><p>④ 执行“DMA结束”中断服务程序<br>正确的执行顺序是()。</p><blockquote><p>B 正确，系统将数据从磁盘读到内存的过程:在开始DMA传输时，主机向内存写入DMA命令块<br>向DMA控制器写入该命令块的地址，启动I/0设备;CPU继续其他工作，DMA控制器则继续下去直接操作内存总线，将地址放到总线上开始传输;完成整个传输，DMA控制器中断CPU。</p></blockquote><ul><li>A. ③ →① →② →④</li><li>B. ② →③ →① →④</li><li>C. ②→① →③ →④</li><li>D. ① →② →④ →③</li></ul><p><br></p></li><li><p>一台显示器的图形分辨率为1024x768，要求显示256种颜色，显示存储器VRAM的容量至少为 (B)</p><blockquote><p>B 正确，N=VRAM容量/(垂直点数x水平点数)其中，N为显示每点颜色的二进制[2位数，本题中256种颜色故需8位，N=8，VRAM容量=(1024x768)x8=768KB，故至少需要 1MB </p></blockquote><ul><li>A. 512KB</li><li>B. 1MB</li><li>C. 3MB</li><li>D. 4MB</li></ul><p><br></p></li><li><p>为提高存储器存取效率,在安排磁盘上的信息分布时，通常是（C）</p><blockquote><p>C 正确，如果选择同一柱面上的不同磁道,由于各记录面的磁头已同时定位,换道的时<br>间只是磁头选择电路的译码时间,相对于定位操作可以忽略不计.</p></blockquote><ul><li>A.存满一面,再存另一面</li><li>B.尽量将同一文件存放在一个扇区或相邻扇区的各磁道上</li><li>C.尽量将同一文件存放在不同面的同一磁道上</li><li>D.上述方法均有效</li></ul><p><br></p></li><li><p>I/O 采用统一编址时，进行输入输出操作的指令是（B）</p><blockquote><p>B 正确，统一编址就是将 I/O 地址看作是存储器地址的一部分，无须专用的 I/O 指令，因此进行输入输出操作时使用访存指令。</p></blockquote><ul><li>A. 控制指令</li><li>B. 访存指令</li><li>C. 输入输出指令</li><li>D. 以上都不对</li></ul><p><br></p></li><li><p>将外设与主存统一编址，一般是指（C）</p><blockquote><p>C 正确， 统一编址时把I/O接口中的端口(有关寄存器)作为主存单元进行访问,通常每个端口占一个主存单元地址</p></blockquote><ul><li><p>A.每台设备占一个地址码</p></li><li><p>B.每个外设接口占一个地址码</p></li><li><p>C.接口中的有关寄存器各占一个地址码</p></li><li><p>D.每台外设由一个主存单元管理</p></li></ul><p><br></p></li><li><p>在计算机系统中，外部设备通过I/O接口与主板的系统总线相连接，其功能是(D)</p><blockquote><p>D 正确，这些都是 I/O 接口的功能</p></blockquote><ul><li>A.数据缓冲和数据格式转换</li><li>B.检测外部设备的状态</li><li>C.控制外部设备的操作</li><li>D.前三种功能的综合作用</li></ul><p><br></p></li><li><p>I/0接口中数据缓冲器的作用是（A）</p><blockquote><p>A 正确，I/0接口中数据缓冲器的作用是用来暂存外设和CPU之间传送的数据，当输入时，由设备送往数据缓冲器，再<br>由数据缓冲器通过数据总线送到内存。反之，输出时，由内存通过数据总线送到数据缓冲器，然后再送到设备。</p></blockquote><ul><li>A. 用来暂存外设和CPU之间传送的数据</li><li>B.用来暂存外设的状态</li><li>C.用来暂存CPU发出的命令</li><li>D.以上都是</li></ul><p><br></p></li><li><p>下面关于 I/O 设备控制方式的叙述中，正确的是（C）</p><blockquote><p>C 正确，</p><p>A. 程序查询方式的 CPU 效率较高 - 错误。程序查询方式需要 CPU 持续轮询 I/O 设备状态,占用 CPU 时间较多,效率较低。</p><p>B. 对于批量数据传输，通常需要进行数据流控制，以确保发送方和接收方之间的数据传输速率匹配。使用中断可能会使数据流控制更加复杂，因为中断的发生和处理可能会影响数据传输的速率和连续性。</p><p>D. DMA 方式完成 I/O 处理较慢 - 错误。DMA (Direct Memory Access) 方式可以在不占用 CPU 的情况下直接在内存和 I/O 设备之间传输数据,效率较高。</p></blockquote><ul><li>A. 程序查询方式的 CPU 效率较高</li><li>B. 中断方式适于批量数据传送</li><li>C. 中断方式需要 CPU 的较多干预</li><li>D. DMA 方式完成 I/O 处理较慢</li></ul><p><br></p></li><li><p>当有中断源发出请求时,CPU可执行相应的中断服务程序。提出中断请求的可以是（C）</p><blockquote><p>C 正确，中断请求可以来自 CPU 外部，也可以来自 CPU 内部。A,B,D 都不能发出中断请求</p></blockquote><ul><li><p>A.通用寄存器</p></li><li><p>B.专用寄存器</p></li><li><p>C.外部事件</p></li><li>D. Cache</li></ul><p><br></p></li><li><p>在中断周期.CPU主要完成以下工作（A）</p><blockquote><p>A正确，在中断周期CPU执行中断隐指令,完成关中断、保存断点、形成中断服务程序入口地址3项操作。</p></blockquote><ul><li>A.关中断,保护断点,发中断响应信号并形成中断服务程序入口地址</li><li>B.开中断,保护断点,发中断响应信号并形成中断服务程序入口地址</li><li>C.关中断,执行中断服务程序</li><li>D.开中断,执行中断服务程序</li></ul><p><br></p></li><li><p>在CPU响应中断时，保护两个关键的硬件状态是(B)。</p><blockquote><p>B 正确，程序计数器以(PC)的内容是被中断程序尚未执行的指令地址，程序状态字(PSW)寄存器保存各种状态信息。CPU响应中断后，需要保护中断的CPU现场，将PC和PSW压入堆栈，这样等到中断结束后，就可以将压入堆栈的原PC和PSW的内容返回相应的寄存器，原程序从断点开始继续执行。</p></blockquote><ul><li>A.PC和IR</li><li>B.PC和PSW</li><li>C.AR和IR</li><li>D.AR和PSW</li></ul><p><br></p></li><li><p>下面关于中断的顺序,排列正确的是(A)</p><blockquote><p>A 正确，中断的顺序是中断请求、中断响应和中断处理。</p></blockquote><ul><li>A.中断请求、中断响应、中断处理</li><li>B.中断响应、中断请求、中断处理</li><li>C.中断处理、中断响应、中断请求</li><li>D.中断响应、中断处理、中断请求</li></ul><p><br></p></li><li><p>I/0与主机交换信息的方式中，中断方式的特点是(B)。</p><blockquote><p>B 正确，当有中断发生时，CPU将暂停当前的主程序，转去处理中断事务，中断处理”完后，继续原来暂停的主程序。因此，中断方式的特点是:(1)CPU的效率高，不必查询等待:(2)<strong>CPU与外设可并行工作</strong>:(3)外设具有申请服务的主动权。</p><p>在I/0与主机交换信息时，传送与主程序串行工作。</p></blockquote><ul><li>A.CPU与设备串行工作，传送与主程序串行工作</li><li>B.CPU与设备并行工作，传送与主程序串行工作</li><li>C.CPU与设备并行工作，传送与主程序并行工作</li><li>D.CPU与设备串行工作，传送与主程序并行工作</li></ul><p><br></p></li><li><p>中断允许触发器用于(C)</p><blockquote><p>C 正确，中断允许触发器的作用是控制是否允许中断。当中断允许触发器为0时,中断关闭(关中断),所有中断源的中断请求都不能得到响应;当中断允许触发器为1时,中断允许(开中断),来自中断源的中断请求可以得到响应。</p></blockquote><ul><li>A.向CPU发中断请求</li><li>B.指示正有中断在进行</li><li>C.开放或关闭中断系统</li><li>D.指不中断处埋结束</li></ul><p><br></p></li><li><p>若有多个中断同时发生,系统将根据中断优先级响应优先级最高的中断请求。若要调整中断事件的处理次序,可以利用(D)</p><blockquote><p>D 正确，如果有多个中断同时发生,要调整中断事件的处理次序,可以利用中断屏蔽的方式</p></blockquote><ul><li>A. 中断嵌套</li><li>B. 中断向量</li><li>C. 中断响应</li><li>D. 中断屏蔽</li></ul><p><br></p></li><li><p>设置中断屏蔽标志可以改变(D)。</p><blockquote><p>D 正确，中断屏蔽标志的二种作用是实现中断升级，即改变中断处理的次序(注意分清中断响应次序和中断处理次序<br>中断响应次序由硬件排队电路决定。当中断请求先后出现时，允许优先级高的中断请求打断优先级低的中断服务程序。</p></blockquote><ul><li>A.多个中断源的中断请求优先级</li><li>B.CPU对多个中断请求响应的优先次序</li><li>C.多个中断服务程序开始执行的顺序</li><li>D.多个中断服务程序执行完的次序</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一次-期末复习&quot;&gt;&lt;a href=&quot;#第一次-期末复习&quot; class=&quot;headerlink&quot; title=&quot;第一次 期末复习&quot;&gt;&lt;/a&gt;第一次 期末复习&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下列部件的位数一定与机器字长相同的是 ()&lt;/p&gt;
&lt;p&gt;I. ALU  </summary>
      
    
    
    
    <category term="计算机组成原理" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="http://example.com/2024/05/22/Vue/"/>
    <id>http://example.com/2024/05/22/Vue/</id>
    <published>2024-05-22T08:17:24.000Z</published>
    <updated>2024-05-30T11:43:31.114Z</updated>
    
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://example.com/2024/05/21/Docker/"/>
    <id>http://example.com/2024/05/21/Docker/</id>
    <published>2024-05-21T15:11:00.000Z</published>
    <updated>2024-06-05T11:41:31.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><p><img src="/2024/05/21/Docker/image-20240522193558516.png" alt="image-20240522193558516"></p><p>注意先通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><p>进入管理员身份后再运行此代码</p><p><img src="/2024/05/21/Docker/image-20240522194049350.png" alt="image-20240522194049350"></p><p><img src="/2024/05/21/Docker/image-20240522194056836.png" alt="image-20240522194056836"></p><p><img src="/2024/05/21/Docker/image-20240522194103643.png" alt="image-20240522194103643"><img src="/2024/05/21/Docker/image-20240522194112899.png" alt="image-20240522194112899"></p><p><img src="/2024/05/21/Docker/image-20240522194127316.png" alt="image-20240522194127316"></p><p><img src="/2024/05/21/Docker/image-20240522194132604.png" alt="image-20240522194132604"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="部署-MySQL"><a href="#部署-MySQL" class="headerlink" title="部署 MySQL"></a>部署 MySQL</h3><p>控制台输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line">  <span class="literal">--name</span> mysql \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">  <span class="literal">-e</span> TZ=Asia/Shanghai \</span><br><span class="line">  <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123</span> \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>大家可以发现，当我们执行命令后，Docker做的第一件事情，是去自动搜索并下载了MySQL，然后会自动运行MySQL，我们完全不用插手，是不是非常方便。</p><p>而且，这种安装方式你完全不用考虑运行的操作系统环境，它不仅仅在CentOS系统是这样，在Ubuntu系统、macOS系统、甚至是装了WSL的Windows下，都可以使用这条命令来安装MySQL。</p><p>要知道，<strong>不同操作系统下其安装包、运行环境是都不相同的</strong>！如果是<strong>手动安装，必须手动解决安装包不同、环境不同的、配置不同的问题</strong>！</p><p>而使用Docker，这些完全不用考虑。就是因为Docker会自动搜索并下载MySQL。注意：这里下载的不是安装包，而是<strong>镜像。</strong>镜像中不仅包含了MySQL本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为<strong>容器</strong>。</p><h3 id><a href="#" class="headerlink" title=" "></a> </h3><h3 id="命令解读"><a href="#命令解读" class="headerlink" title="命令解读"></a>命令解读</h3><ul><li>docker run : 创建并运行一个容器 ， -d 是让容器在后台运行</li><li>—name mysql : 给容器起个名字，必须唯一</li><li>-p 3306:3306: 设置端口映射 (第一个参数是宿主机端口，第二个容器内的端口)</li><li>-e KEY=VALUE：是设置环境变量</li><li>mysql：指定运行的镜像的名称</li></ul><p><img src="/2024/05/21/Docker/image-20240522200954333.png" alt="image-20240522200954333"></p><h2 id="Docker-基础"><a href="#Docker-基础" class="headerlink" title="Docker 基础"></a>Docker 基础</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ul><li>docker pull 镜像名  — 拉取对应镜像</li><li>docker images — 查看所有镜像</li><li>docker save -o nginx.tar nginx:latest —将nginx镜像保存到本地</li><li>docker rmi 镜像名 —删除镜像</li><li>docker load -i nginx.tar —通过本地保存的 nginx.tar 重新下载该镜像</li></ul><p><img src="/2024/05/21/Docker/image-20240525122552516.png" alt="image-20240525122552516"></p><p>使用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>命令拉取 nginx 镜像</p><p>将 nginx 保存到本地</p><p><img src="/2024/05/21/Docker/image-20240525123459765.png" alt="image-20240525123459765"></p><p>将删除的 nginx 镜像通过本地的 tar 重新下载回来</p><p><img src="/2024/05/21/Docker/image-20240525123726413.png" alt="image-20240525123726413"></p><h2 id="Docker-部署本地项目完整流程"><a href="#Docker-部署本地项目完整流程" class="headerlink" title="Docker 部署本地项目完整流程"></a>Docker 部署本地项目完整流程</h2><ul><li><p>打包本地项目</p><ul><li><p>打包前端，将打包后的文件放入 nginx 的 html 目录下，注意修改 nginx 的配置文件使得代理生效。注意修改与对应 docker 中相同。注意目录形式与配置文件中保持一致<img src="/2024/05/21/Docker/image-20240527231638936.png" alt="image-20240527231638936"><img src="/2024/05/21/Docker/image-20240527233217068.png" alt="image-20240527233217068"></p><p><img src="/2024/05/21/Docker/image-20240527231409944.png" alt="image-20240527231409944"></p></li></ul></li></ul><ul><li>打包后端，首先要书写 dockerfile 文件格式如下 注意修改对应的 jdk 版本， 对应名称可以去查询 docker 官网， 然后将 jar包名称改成你项目打包后的名字<img src="/2024/05/21/Docker/image-20240527224316581.png" alt></li></ul><p>​        然后修改后端的 yml 配置文件 修改 ip 为虚拟机 ip，密码修改为 docker 数据库中的密码，然后打包 jar 包。</p><p>​    <img src="/2024/05/21/Docker/image-20240527233848118.png" alt="image-20240527233848118"></p><ul><li><p>服务器环境建设</p><ul><li><p>后端</p><ul><li><p>首先需要下载对应 jdk 的镜像 如我使用的是 Java8，需要去官网找到对应 Java8 的镜像，然后拉取，在控制台输入</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull openjdk:<span class="number">8</span>-jdk-alpine</span><br></pre></td></tr></table></figure></li><li><p>然后在 root 下创建文件夹后，将 jar 包和 Dockerfile 拖入，进入对应文件夹后，控制台输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t back-end . </span><br></pre></td></tr></table></figure><p>其中 back-end为设置的镜像名称 ，再输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>创建本地网络</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dokcer network create test</span><br></pre></td></tr></table></figure><p>查看本地镜像是否存在 back-end，有即成功，接着测试后端项目。输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name back-end -p 8080:8080 --network test back-end</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看到 back-end 存在即部署成功</p><p>接着</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f back-end</span><br></pre></td></tr></table></figure><p>看到熟悉的 spring 标志表示项目正在运行。</p></li><li><p>连接数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  --network test \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>可以在远程操作通过 ip 连接数据库后进行操作</p></li></ul></li><li><p>前端</p><ul><li><p>将 nginx 文件夹拖入到对应项目文件夹中。执行代码 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name nginx \</span><br><span class="line">    -p 80:80 \</span><br><span class="line">    -v /root/GoodsServiceManager/nginx/html:/usr/share/nginx/html \</span><br><span class="line">    -v /root/GoodsServiceManager/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">    --network test \</span><br><span class="line">    nginx</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;h2 id=&quot;Docker的安装&quot;&gt;&lt;a href=&quot;#Docker的安装&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Java后端" scheme="http://example.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="微服务" scheme="http://example.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="http://example.com/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</id>
    <published>2024-05-21T14:23:49.000Z</published>
    <updated>2024-05-30T11:43:35.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四章-指令系统"><a href="#第四章-指令系统" class="headerlink" title="第四章 指令系统"></a>第四章 指令系统</h1><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><ol><li>零地址指令<img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522201906602.png" alt="image-20240522201906602"></li></ol><ol><li><p>一地址指令<img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522202200028.png" alt="image-20240522202200028"></p></li><li><p>二、三地址指令<img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522202356914.png" alt="image-20240522202356914"></p></li><li><p>四地址指令<img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522202516755.png" alt="image-20240522202516755"></p></li></ol><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522202625420.png" alt="image-20240522202625420"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522203014082.png" alt="image-20240522203014082"></p><h2 id="扩展操作码指令格式"><a href="#扩展操作码指令格式" class="headerlink" title="扩展操作码指令格式"></a>扩展操作码指令格式</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522203441907.png" alt="image-20240522203441907"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522203822773.png" alt="image-20240522203822773"></p><h2 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h2><h3 id="顺序寻址"><a href="#顺序寻址" class="headerlink" title="顺序寻址"></a>顺序寻址</h3><ul><li>顺序寻址即为一条一条往下执行，每次 <strong>PC</strong> 加  ‘1’  这里的  1 可以理解为 1 个指令字长， 实际加的值会因为指令长度、编址方式而不同</li></ul><h3 id="跳跃寻址"><a href="#跳跃寻址" class="headerlink" title="跳跃寻址"></a>跳跃寻址</h3><ul><li>由转移指令指出，类似于 <strong>goto</strong> 的使用，即无条件转移把 <strong>PC</strong> 中的内容改成转移指令给出的值</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240522205251877.png" alt="image-20240522205251877"></p><h2 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h2><h3 id="直接寻址-灵活性较差"><a href="#直接寻址-灵活性较差" class="headerlink" title="直接寻址 (灵活性较差)"></a>直接寻址 (灵活性较差)</h3><ul><li>给出的形式地址即为真实地址</li></ul><h3 id="间接寻址"><a href="#间接寻址" class="headerlink" title="间接寻址"></a>间接寻址</h3><ul><li>给出的地址信息 可能是指向此地址后面几个位置</li></ul><h3 id="偏移寻址"><a href="#偏移寻址" class="headerlink" title="偏移寻址"></a>偏移寻址</h3><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/4f1192267a3ff434eb63a32dae83cb6.jpg" alt="4f1192267a3ff434eb63a32dae83cb6"></p><h2 id="微指令格式"><a href="#微指令格式" class="headerlink" title="微指令格式"></a>微指令格式</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/d770491f181a338bde51c0ce9b336d6.jpg" alt="d770491f181a338bde51c0ce9b336d6"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/b14c43996e4b4641ae0e9e3726db8cd.jpg" alt="b14c43996e4b4641ae0e9e3726db8cd"></p><p><br></p><h1 id="第五章-CPU"><a href="#第五章-CPU" class="headerlink" title="第五章 CPU"></a>第五章 CPU</h1><h2 id="CPU-的功能"><a href="#CPU-的功能" class="headerlink" title="CPU 的功能"></a>CPU 的功能</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/2cbd0037e354023bf22c4b28b82db6f.jpg" alt="2cbd0037e354023bf22c4b28b82db6f"></p><h2 id="运算器-控制器的功能"><a href="#运算器-控制器的功能" class="headerlink" title="运算器 控制器的功能"></a>运算器 控制器的功能</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/359208b40a6088c79b8c1bde73ec1be.jpg" alt="359208b40a6088c79b8c1bde73ec1be"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/8cb0b550184b5561e80e09836d938b0.jpg" alt="8cb0b550184b5561e80e09836d938b0"></p><h1 id="第五章-总线"><a href="#第五章-总线" class="headerlink" title="第五章 总线"></a>第五章 总线</h1><h2 id="总线的分类"><a href="#总线的分类" class="headerlink" title="总线的分类"></a>总线的分类</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/90ce03e7761cee0e33ce1472496cee8.jpg" alt="90ce03e7761cee0e33ce1472496cee8"></p><h2 id="总线的特性"><a href="#总线的特性" class="headerlink" title="总线的特性"></a>总线的特性</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/9a6fbe112cc28248927b4308686d637.jpg" alt="9a6fbe112cc28248927b4308686d637"></p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20240526154127723.png" alt="image-20240526154127723"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第四章-指令系统&quot;&gt;&lt;a href=&quot;#第四章-指令系统&quot; class=&quot;headerlink&quot; title=&quot;第四章 指令系统&quot;&gt;&lt;/a&gt;第四章 指令系统&lt;/h1&gt;&lt;h2 id=&quot;指令格式&quot;&gt;&lt;a href=&quot;#指令格式&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="计算机组成原理" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="http://example.com/2024/05/21/MybatisPlus/"/>
    <id>http://example.com/2024/05/21/MybatisPlus/</id>
    <published>2024-05-21T14:11:35.000Z</published>
    <updated>2024-05-30T11:43:26.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MybatisPlus-核心功能"><a href="#MybatisPlus-核心功能" class="headerlink" title="MybatisPlus 核心功能"></a>MybatisPlus 核心功能</h1><h2 id="IService-批量处理"><a href="#IService-批量处理" class="headerlink" title="IService 批量处理"></a>IService 批量处理</h2><p>开启 rewriteBatchedStatements = true 参数可以使得批量插入速度得到提升(数量越大提升越明显)</p><h1 id="MybatisPlus-拓展功能"><a href="#MybatisPlus-拓展功能" class="headerlink" title="MybatisPlus 拓展功能"></a>MybatisPlus 拓展功能</h1><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><blockquote><p>即根据数据库表结构自动生成对应代码</p></blockquote><ol><li><p>安装插件 MybatisPlus</p></li><li><p>点击 idea 导航栏中的 Other 连接对应数据库 (注意要加上对应时区) <img src="/2024/05/21/MybatisPlus/image-20240521224805193.png" alt="image-20240521224805193"></p></li><li><p>进行代码生成 <img src="/2024/05/21/MybatisPlus/image-20240521225037648.png" alt="image-20240521225037648"></p><p>生成的效果如下 (仅展示实体类部分)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="meta">@author</span> author</span><br><span class="line"> * <span class="meta">@since</span> <span class="number">2024</span>-<span class="number">05</span>-<span class="number">21</span></span><br><span class="line"> */</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;address&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></li></ol><h2 id="DB静态工具"><a href="#DB静态工具" class="headerlink" title="DB静态工具"></a>DB静态工具</h2><ol><li>当需要使用多个 Service 直接相互调用的时候可以使用 DB静态工具 用法如下<img src="/2024/05/21/MybatisPlus/image-20240522183819638.png" alt="image-20240522183819638"></li></ol><p>根据用户 id 在另一个 address 表中查询其地址信息</p><ol><li>实现 ‘1’ 中的批量查询功能，根据 ids 查询多个用户的地址信息</li></ol><p><img src="/2024/05/21/MybatisPlus/image-20240522184819197.png" alt="image-20240522184819197"></p><p><img src="/2024/05/21/MybatisPlus/image-20240522184729262.png" alt="image-20240522184729262"></p><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>即根据代码逻辑模拟删除，但并不会真正删除。思路如下：</p><ul><li>在表中添加一个字段标记数据是否被删除</li><li>当删除数据时把标记置为1</li><li>查询时只查询标记为0的数据</li></ul><p><img src="/2024/05/21/MybatisPlus/image-20240522185243382.png" alt="image-20240522185243382"></p><p>只需要在 yml 中配置逻辑删除字段即可</p><h2 id="枚举处理器"><a href="#枚举处理器" class="headerlink" title="枚举处理器"></a>枚举处理器</h2><p><img src="/2024/05/21/MybatisPlus/image-20240522190049159.png" alt="image-20240522190049159"></p><h2 id="JSON-处理器"><a href="#JSON-处理器" class="headerlink" title="JSON 处理器"></a>JSON 处理器</h2><p><img src="/2024/05/21/MybatisPlus/image-20240522190411764.png" alt="image-20240522190411764"></p><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><h3 id="分页插件的基本使用"><a href="#分页插件的基本使用" class="headerlink" title="分页插件的基本使用"></a>分页插件的基本使用</h3><ol><li><p>配置分页插件的拦截器<img src="/2024/05/21/MybatisPlus/image-20240522190948343.png" alt="image-20240522190948343"></p></li><li><p>使用分页的工具<img src="/2024/05/21/MybatisPlus/image-20240522191007640.png" alt="image-20240522191007640"></p></li></ol><h3 id="通用分页实体"><a href="#通用分页实体" class="headerlink" title="通用分页实体"></a>通用分页实体</h3><ol><li><p>案例<img src="/2024/05/21/MybatisPlus/image-20240522191217367.png" alt="image-20240522191217367"></p></li><li><p>代码如下<img src="/2024/05/21/MybatisPlus/image-20240522191711694.png" alt="image-20240522191711694"></p></li></ol><p><img src="/2024/05/21/MybatisPlus/image-20240522191723171.png" alt="image-20240522191723171"></p><h3 id="通用分页实体与-mp-转换"><a href="#通用分页实体与-mp-转换" class="headerlink" title="通用分页实体与 mp 转换"></a>通用分页实体与 mp 转换</h3><p>将构建分页条件和封装 VO 结果写在实体方法里面 最后再在业务中调用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MybatisPlus-核心功能&quot;&gt;&lt;a href=&quot;#MybatisPlus-核心功能&quot; class=&quot;headerlink&quot; title=&quot;MybatisPlus 核心功能&quot;&gt;&lt;/a&gt;MybatisPlus 核心功能&lt;/h1&gt;&lt;h2 id=&quot;IService-</summary>
      
    
    
    
    <category term="Java后端" scheme="http://example.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="微服务" scheme="http://example.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/05/20/hello-world/"/>
    <id>http://example.com/2024/05/20/hello-world/</id>
    <published>2024-05-20T14:09:08.625Z</published>
    <updated>2024-05-30T11:41:56.406Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一篇博客</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是我的第一篇博客&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
